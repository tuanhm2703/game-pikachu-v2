{"version":3,"sources":["pages/MainPage.module.css","pages/SinglePlayerPage.module.css","components/Game/GameSurvivalTiming.module.css","pages/PlayerPage.module.css","routes/CONSTANTS.ts","types/game.ts","recoil/atoms/gameSoundState.ts","recoil/atoms/playerState.ts","utils/game.ts","components/Welcome.tsx","pages/MainPage.tsx","api/CONSTANTS.ts","api/ranking.ts","hooks/useAsync.ts","utils/time.ts","components/Rank/TopList.tsx","components/RankBoard.tsx","recoil/atoms/gameState.ts","recoil/atoms/gameOverlayState.ts","recoil/atoms/selectedPokemonsState.ts","recoil/selectors/selectedPokemonsSelector.ts","hooks/useGameActions.ts","hooks/useLocalStorage.ts","services/i18n.ts","components/SwitchLanguage.tsx","pages/SinglePlayerPage.tsx","types/chat.ts","recoil/atoms/messagesState.ts","components/Chat/ChatBox.tsx","components/Chat/Message.tsx","components/Chat/MessagesBox.tsx","api/user.ts","utils/memo.ts","components/Chat/ActivePlayer.tsx","components/Chat/ListActivePlayers.tsx","recoil/atoms/gameSupportState.ts","recoil/atoms/chatSocketState.ts","api/game.ts","components/Chat/ActiveGame.tsx","components/Chat/ListActiveGames.tsx","components/ChatRoom.tsx","hooks/useChatSocket.ts","recoil/atoms/gameBattleState.ts","pages/MultiPlayerPage.tsx","components/Game/PokemonCard.tsx","components/Game/PokemonRow.tsx","hooks/useGameEngine.ts","components/GameBoard.tsx","components/Game/LineCard.tsx","components/Game/LineRow.tsx","components/GameOverlay.tsx","hooks/useGameOverlayEngine.ts","components/Game/GameLevel.tsx","components/Game/GameTiming.tsx","components/Game/GameTitle.tsx","components/Game/GameReplay.tsx","components/Game/GameSpeedInfo.tsx","pages/SpeedModePage.tsx","components/Game/GameSurvivalTiming.tsx","components/Game/GameSurvivalInfo.tsx","components/Game/GameSurvivalWinInfo.tsx","components/Game/GameSurvivalLoseInfo.tsx","components/Game/GameStickySurvivalTiming.tsx","components/MinimalizeIcon.tsx","pages/SurvivalModePage.tsx","pages/PlayerPage.tsx","components/Game/CompetitorReadyGameButton.tsx","recoil/atoms/gameBattlePointsState.ts","hooks/useGameBattleActions.ts","components/Game/GameBattleBar.tsx","components/Game/PokemonBattleCard.tsx","components/Game/PokemonBattleRow.tsx","hooks/useGameBattleEngine.ts","components/GameBattleBoard.tsx","components/Game/GameBattleSocket.tsx","hooks/useGameBattleSocket.ts","components/Game/GamePendingTiming.tsx","components/Game/GameBoardContainer.tsx","components/Game/ReadyGameButton.tsx","components/Game/GameBattleContainner.tsx","pages/BattleModePage.tsx","App.tsx","reportWebVitals.ts","assets/sound/menu-open.mp3","assets/sound/disable-sound.mp3","assets/sound/enable-sound.mp3","assets/sound/switch-on.mp3","assets/sound/switch-off.mp3","assets/sound/bite.mp3","assets/sound/fanfare.mp3","assets/sound/glug-a.mp3","assets/sound/rising-pops.mp3","assets/sound/game-completion.wav","assets/sound/gamers-fail-game.mp3","assets/sound/time-limited.wav","assets/sound/levelup.mp3","assets/sound/pop-down.mp3","assets/sound/pop-up-on.mp3","assets/sound/pop-up-off.mp3","assets/sound/you-win.mp3","assets/sound/game-song.mp3","recoil/atoms/toggleSoundState.ts","hooks/usePlaySound.ts","components/Sound/BiteSound.tsx","components/Sound/CompletedGameSound.tsx","components/Sound/OpenMenuSound.tsx","components/Sound/DisableSound.tsx","components/Sound/EnableSound.tsx","components/Sound/FanfareSound.tsx","components/Sound/FailedGameSound.tsx","components/Sound/GameSongSound.tsx","components/Sound/LevelUpSound.tsx","components/Sound/NearlyEndTimeSound.tsx","components/Sound/OffSound.tsx","components/Sound/OnSound.tsx","components/Sound/PopDownSound.tsx","components/Sound/PopUpOffSound.tsx","components/Sound/PopUpOnSound.tsx","components/Sound/YouWinSound.tsx","components/Sound/RisingPopSound.tsx","components/Sound/YoutubeThemeSong.tsx","components/Sound/GlugSound.tsx","components/SoundProvider.tsx","index.tsx"],"names":["module","exports","Routes","GameSelector","GameMode","GameTypeState","GameStatus","SocketCommand","GameSocketEvents","Direction","PointType","GameLevel","gameOptions","LEVEL_1","row","col","LEVEL_2","LEVEL_3","LEVEL_4","LEVEL_5","LEVEL_6","LEVEL_7","LEVEL_8","LEVEL_9","LEVEL_10","LEVEL_11","LEVEL_12","LEVEL_13","LEVEL_14","nextLevel","GameBattleEffect","gameBattleEffect","LEVEL_UP","FREEZE","LEVEL_MAX","LEVEL_BATTLE_MAX","gameSoundState","atom","key","GAME_SOUND_STATE","default","soundReady","gameSongDuration","playOpenMenuSound","undefined","playEnableSound","playDisableSound","playCompletedGameSound","playFailedGameSound","playBiteSound","playRisingPopSound","playFanfareSound","playGlugSound","playNearlyEndTimeSound","playOffSound","playOnSound","playLevelUpSound","playPopDownSound","playPopUpOnSound","playPopUpOffSound","playYouWinSound","playGameSong","playerState","PLAYER_STATE","rankingId","player","playerTiming","BASE_URL","pokemonList","id","matched","image","concat","shufflePokemonList","nonShuffleList","shuffledPokemonList","sort","Math","random","shuffledlistPokemon","map","pokemon","nid","nanoid","reShufflePokemonList","arrayPokemons","objectList","arrayList","Object","keys","push","convertObjectToArrayList","makeListPokemons","total","slicePokemonList","slice","nonShufflePokemonList","generatePokemonMatrix","pokemons","rowSetting","arguments","length","colSetting","newPokemons","_objectSpread","totalCol","totalRow","pokemonKeys","pokemonMatrix","borderPoint","pokemonKey","pop","rowIndex","colIndex","hasConnectLine","point1","point2","matrix","pathPoints","findPath","fromPoint","toPoint","matrixTotalRow","matrixTotalCol","tempMatrix","newMatrix","i","cloneMatrix","matrixPoints","matrixTrackingPoints","dRow","dCol","queue","currentPoint","shift","index","trackedPoints","trackPoint","connected","checkPointInLine","connectingLinePoints","currentPosition","find","matchingLinePoint","checkConnectionSelectedPokemons","selectedPokemons","newSelectedPokemons","selectedPokemon1","selectedPokemon2","drawPath","limitRow","limitCol","reduce","newPathPoints","arrayPoints","direction","type","LINE","prevIndex","END","prevPoint","TOP","BOTTOM","LEFT","RIGHT","extraPoint","START","newCurrentPoint","checkCompletedLevel","entries","findIndex","_ref","_","hasAnyConnectLine","foundConnectLine","entriesPokemons","entryPokemon","currentPokemon","some","_ref2","getPlayerName","replace","getPlayerID","Welcome","t","useTranslation","useRecoilValue","_jsx","_Fragment","children","_jsxs","className","style","color","MainPage","styles","background","overlay","Helmet","charSet","title","navigation","Link","to","SURVIVAL_MODE_EASY_PAGE","button","onClick","BASE_API","defaultFetchOptions","method","mode","cache","credentials","headers","redirect","referrerPolicy","getTopRanking","fetch","then","res","json","response","error","ResponseStatus","useAsync","asyncFunction","immediate","status","setStatus","useState","IDLE","value","setValue","setError","execute","useCallback","PENDING","SUCCESS","catch","ERROR","useEffect","timeConvert","num","minutes","floor","toString","padStart","dateTimeFromTimestamp","timestamp","Date","toLocaleString","TopList","_topPlayersResponse$d","topPlayersResponse","data","SPEED_MODE","SPEED_MODE_PAGE","width","margin","SURVIVAL_MODE_PAGE","topPlayer","timing","RankBoard","SURVIVAL_MODE","memo","gameState","GAME_STATE","level","remainingTime","gameOverlayState","GAME_OVERLAY_STATE","suggestPoints","freezing","selectedPokemonsState","SELECTED_POKEMONS","selectedPokemonsSelector","selector","SELECTED_POKEMONS_SELECTOR","get","set","newValue","cloneSelectedPokemons","useGameActions","setGame","useSetRecoilState","setPlayer","setSelectedPokemons","resetGameState","useResetRecoilState","resetGameOverlayState","resetSelectedPokemonsState","initGame","replayGame","startGame","prevGame","RUNNING","endGame","isWin","COMPLETED","selectPokemon","pokemonId","resetGame","addNewRankingScore","fetchOptions","body","JSON","stringify","addNewRanking","now","prevPlayer","_response$id","updateNewRankingScore","updateNewRanking","useLocalStorage","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","parse","console","log","valueToStore","Function","setItem","i18n","use","initReactI18next","init","resources","en","translation","English","Vietnamese","Back","Replay","Language","Level","Congratulations","Submit","Out","Quit","Ready","Stop","You","Competitor","Join","vi","lng","fallbackLng","interpolation","escapeValue","SwitchLanguage","setStorageValue","changeLanguage","switchLanguage","SinglePlayerPage","form","marginBottom","MAIN_PAGE","ChatTypeState","DEFAULT_CHANNEL","BASE_WS_URL","messagesState","MESSAGES_STATE","messages","ChatBox","handleSubmit","throttle","setThrottle","onSubmit","event","setTimeout","alert","name","placeholder","autoFocus","autoComplete","Message","message","history","useHistory","gameId","content","match","selfClass","joinGame","BATTLE_MODE_PAGE","isOldMessage","prevProps","nextProps","MessagesBox","setMessages","useRecoilState","messagesBox","document","getElementById","scrollTo","behavior","top","scrollHeight","getActivePlayers","preventReRender","ActivePlayer","areSameProps","ListActivePlayers","_activePlayersRespons","activePlayersResponse","timeoutId","clearTimeout","activePlayer","gameSupportState","GAME_SUPPORT_STATE","supported","tutorial","chatSocketState","CHAT_SOCKET_STATE","sendMakeGame","getActiveGames","getPlayersInGame","ActiveGame","_playersInGameRespons","fetchPlayersInGame","fetchStatus","playersInGameResponse","fullGameClass","ListActiveGames","_activeGamesResponse$","activeGamesResponse","ChatRoom","room","setGameSupport","setMessagesState","setChatSocketState","socketUrl","sendJsonMessage","readyState","lastJsonMessage","lastMessage","useWebSocket","reconnectAttempts","reconnectInterval","retryOnError","shouldReconnect","queryParams","username","onOpen","helpMessage","command","channel","_ref3","gameSupport","onMessage","onClose","closeMessage","_ref4","onError","_ref5","baseMessageJson","SEND_MESSAGE","messageJson","useChatSocket","_ref6","handleClickSendMessage","ReadyState","OPEN","preventDefault","inputMessage","currentTarget","setAttribute","trim","replaceAll","removeAttribute","focus","CLOSED","CLOSING","CONNECTING","includes","reTryConnectSocket","location","reload","areEqualProps","gameBattleState","GAME_BATTLE_STATE","allReady","competitor","winner","socketStatus","UNINSTANTIATED","sendSelectedPokemon","sendReadyGame","sendUnReadyGame","sendQuitGame","sendJoinedGame","sendDecreasePoints","sendIncreasePoints","sendGameEffect","sendGameWinner","MultiPlayerPage","resetGameBattle","goToGameMatch","matchId","maxLength","PokemonCard","_pokemon$image","isSelected","selected","hidden","backgroundImage","propsAreEquals","PokemonRow","useGameEngine","useLocation","currentPlayer","levelUp","newShufflePokemons","shuffleMatrix","GameBoard","LineCard","point","suggested","pointClass","suggestedClass","lineRef","useRef","current","classList","remove","ref","_prevProps$point","_nextProps$point","_prevProps$point2","_nextProps$point2","LineRow","cards","suggestPoint","GameOverlay","setGameOverlayState","useGameOverlayEngine","columnCards","Array","fill","freezingClass","FREEZING_TIME","currentLevel","Number","parseInt","fontSize","boxShadow","padding","borderRadius","GameTiming","hasTiming","setGameOverlay","timingState","setTimingState","suggestTiming","pendingTiming","gameOverlay","intervalId","countdownEl","innerText","setInterval","clearInterval","GameTitle","win","src","alt","GameReplay","action","marginTop","GameSpeedInfo","SpeedModePage","SINGLE_PLAYER_PAGE","GameSurvivalTiming","useParams","time","remainTiming","timingText","timingInfo","GameSurvivalInfo","GameSurvivalWinInfo","voucherCode","setVoucherCode","async","handleRecaptcha","position","display","bottom","left","transform","border","textAlign","fontWeight","reset","GameSurvivalLoseInfo","GameStickySurvivalTiming","remainTime","setRemainTime","MinimalizeIcon","height","xmlns","viewBox","d","points","SurvivalModePage","setIsWin","hideSidebar","setHideSidebar","justifyContent","alignItems","gap","verticalAlign","paddingLeft","right","zIndex","flexDirection","transition","minWidth","maxWidth","cursor","onMouseOver","e","onMouseOut","letterSpacing","whiteSpace","stopPropagation","PlayerPage","saveLocalPlayerName","playerName","newPlayer","input","CompetitorReadyGameButton","classReady","gameBattlePointsState","GAME_BATTLE_POINTS_STATE","competitorPoint","yourPoint","useGameBattleActions","setGameBattle","setGameBattlePoints","resetGameBattlePoints","gameBattle","reSetupGame","onReadyGame","READY","selectBattlePokemon","pendingGame","increaseYourPoints","gameBattlePoints","decreaseYourPoints","levelUpYourPoints","handleSocketEvents","UNREADY","filter","playerReady","JOINED","QUIT","INCREASE_COMPETITOR_POINTS","DECREASE_COMPETITOR_POINTS","FREEZE_COMPETITOR_BOARD","LEVEL_UP_POINTS","GAME_WINNER","GameBattleBar","yourWidth","PokemonBattleRow","PokemonBattleCard","useGameBattleEngine","competitorRef","useLayoutEffect","sendQuitBeforeOut","addEventListener","removeEventListener","newLevel","effectEvent","randomEffectEvent","GameBattleBoard","GameBattleSocket","setGameBattleState","joinMessage","messageData","effect","freeJson","levelUpJson","useGameBattleSocket","MULTI_PLAYER_PAGE","areEqualGame","GamePendingTiming","winnerPlayerName","second","GameBoardContainer","ReadyGameButton","GameBattleContainer","BattleModePage","playersInGame","App","language","localPlayer","PLAYER_PAGE","Switch","Route","path","exact","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","toggleSoundState","music","Sound","usePlaySound","sound","defaultConfigSound","interrupt","volume","soundPath","menuOpenSound","BITE","biteSound","COMPLETE_GAME","completeGameSound","DISABLE","disableSound","ENABLE","enableSound","ON","onSound","OFF","offSound","FAIL_GAME","failedGameSound","GLUG","glugSound","FANFARE","fanfareSound","RISING_POP","risingPopSound","NEARLY_END_TIME","nearlyEndTimeSound","levelUpSound","POP_DOWN","popDownSound","POP_UP_ON","popUpOnSound","POP_UP_OFF","popUpOffSound","YOU_WIN","youWinSound","GAME_SONG","gameSongSound","play","loadedSound","stop","stopSound","pause","pauseSound","duration","useSound","playSound","BiteSound","setSounds","sounds","areLoaded","CompletedGameSound","OpenMenuSound","MENU_OPEN","DisableSound","EnableSound","FanfareSound","FailedGameSound","GameSongSound","LevelUpSound","NearlyEndTimeSound","OffSound","OnSound","PopDownSound","PopUpOffSound","PopUpOnSound","YouWinSound","RisingPopSound","YoutubeThemeSong","ReactPlayer","url","playing","loop","GlugSound","SoundProvider","setRealVh","vh","innerHeight","documentElement","setProperty","ReactDOM","render","React","StrictMode","RecoilRoot","Router"],"mappings":"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","file":"static/js/main.1590adfb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"MainPage_background__2IdRT\",\"overlay\":\"MainPage_overlay__3horM\",\"navigation\":\"MainPage_navigation__ZmtmM\",\"button\":\"MainPage_button__LsHm0\",\"title\":\"MainPage_title__Tfd0f\",\"survivalButton\":\"MainPage_survivalButton__3ZNBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"SinglePlayerPage_background__TBlWZ\",\"overlay\":\"SinglePlayerPage_overlay__2bQzj\",\"title\":\"SinglePlayerPage_title__24AZ7\",\"form\":\"SinglePlayerPage_form__2c8wQ\",\"input\":\"SinglePlayerPage_input__10m25\",\"button\":\"SinglePlayerPage_button__15UUb\",\"shape\":\"SinglePlayerPage_shape__Yks_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timingInfo\":\"GameSurvivalTiming_timingInfo__2Hnyr\",\"timingText\":\"GameSurvivalTiming_timingText__8_knQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"PlayerPage_background__1IyM0\",\"overlay\":\"PlayerPage_overlay__2iPCv\",\"title\":\"PlayerPage_title__2vRzp\",\"form\":\"PlayerPage_form__MuChp\",\"input\":\"PlayerPage_input__3CEdK\",\"button\":\"PlayerPage_button__2gbtQ\",\"shape\":\"PlayerPage_shape__1Hhxy\",\"inputPrompt\":\"PlayerPage_inputPrompt__15Vjr\"};","export enum Routes {\n  MAIN_PAGE = \"/\",\n  PLAYER_PAGE = \"/player\",\n  SINGLE_PLAYER_PAGE = \"/single-player\",\n  MULTI_PLAYER_PAGE = \"/multi-player\",\n  SURVIVAL_MODE_PAGE = \"/survival-mode/:level\",\n  SURVIVAL_MODE_EASY_PAGE = \"/survival-mode/easy\",\n  SURVIVAL_MODE_HARD_PAGE = \"/survival-mode/hard\",\n  SPEED_MODE_PAGE = \"/speed-mode\",\n  BATTLE_MODE_PAGE = \"/battle-mode/:gameId\",\n}\n","import { ReadyState } from \"react-use-websocket\";\nimport { PlayFunction } from \"use-sound/dist/types\";\n\nexport enum GameSelector {\n  SELECTED_POKEMONS_SELECTOR = \"SELECTED_POKEMONS_SELECTOR\",\n}\n\nexport interface PlayerState {\n  rankingId?: string;\n  player: string;\n  playerTiming: number;\n}\n\nexport interface Pokemon {\n  id: string;\n  matched: boolean;\n  nid?: string;\n  image?: string;\n  rowIndex?: number;\n  colIndex?: number;\n}\n\nexport enum GameMode {\n  SURVIVAL_MODE = \"survival\",\n  SPEED_MODE = \"speed\",\n}\n\nexport interface GameSound {\n  soundReady: boolean;\n  gameSongDuration: number;\n  playOpenMenuSound?: PlayFunction;\n  playDisableSound?: PlayFunction;\n  playEnableSound?: PlayFunction;\n  playCompletedGameSound?: PlayFunction;\n  playFailedGameSound?: PlayFunction;\n  playBiteSound?: PlayFunction;\n  playOnSound?: PlayFunction;\n  playOffSound?: PlayFunction;\n  playGlugSound?: PlayFunction;\n  playFanfareSound?: PlayFunction;\n  playRisingPopSound?: PlayFunction;\n  playNearlyEndTimeSound?: PlayFunction;\n  playLevelUpSound?: PlayFunction;\n  playPopUpOnSound?: PlayFunction;\n  playPopUpOffSound?: PlayFunction;\n  playPopDownSound?: PlayFunction;\n  playYouWinSound?: PlayFunction;\n  playGameSong?: PlayFunction;\n}\n\nexport enum GameTypeState {\n  PLAYER_STATE = \"PLAYER_STATE\",\n  GAME_STATE = \"GAME_STATE\",\n  GAME_SOUND_STATE = \"GAME_SOUND_STATE\",\n  GAME_OVERLAY_STATE = \"GAME_OVERLAY_STATE\",\n  GAME_BATTLE_STATE = \"GAME_BATTLE_STATE\",\n  SELECTED_POKEMONS = \"SELECTED_POKEMONS\",\n  CHAT_SOCKET_STATE = \"CHAT_SOCKET_STATE\",\n  GAME_SUPPORT_STATE = \"GAME_SUPPORT_STATE\",\n  GAME_BATTLE_POINTS_STATE = \"GAME_BATTLE_POINTS_STATE\",\n}\n\nexport enum GameStatus {\n  RUNNING = \"running\",\n  PENDING = \"pending\",\n  READY = \"ready\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\",\n}\n\nexport interface GameState {\n  status: GameStatus;\n  row: number;\n  col: number;\n  pokemons: Record<string, Pokemon>;\n  matrix: Pokemon[][];\n  level: GameLevel;\n  remainingTime: number;\n}\n\nexport interface GameOverlayState {\n  connectingLinePoints: PointCoords[];\n  suggestPoints: [PointCoords | undefined, PointCoords | undefined];\n  freezing?: boolean;\n}\n\nexport interface ChatSocketState {\n  sendMakeGame?: (gameId: string) => void;\n}\nexport interface GameBattleState {\n  gameId?: string;\n  allReady: string[];\n  competitor?: string;\n  winner?: string;\n  socketStatus: ReadyState;\n  selectPokemon?: (rowIndex: number, colIndex: number) => void;\n  sendReadyGame?: () => void;\n  sendUnReadyGame?: () => void;\n  sendQuitGame?: () => void;\n  sendJoinedGame?: () => void;\n  sendDecreasePoints?: () => void;\n  sendIncreasePoints?: () => void;\n  sendGameWinner?: (winner: string) => void;\n  sendGameEffect?: (effect: GameBattleEffect) => void;\n  sendSelectedPokemon?: (rowIndex: number, colInddex: number) => void;\n}\n\nexport interface GameBattlePointsState {\n  competitorPoint: number;\n  yourPoint: number;\n}\n\nexport enum SocketCommand {\n  SUBSCRIBE = 0,\n  UNSUBSCRIBE = 1,\n  SEND_MESSAGE = 2,\n}\nexport interface GameSocketMessage {\n  command: SocketCommand;\n  event: GameSocketEvents;\n  player: string;\n  content?: string;\n  match?: string;\n  currentPlayer?: string;\n}\n\nexport interface ChatSocketMessage {\n  command: SocketCommand;\n  channel: string;\n  name: string;\n  content?: string;\n  timestamp?: number;\n}\n\nexport enum GameBattleStatus {\n  READY = \"ready\",\n  END = \"end\",\n}\n\nexport enum GameSocketEvents {\n  READY = \"READY\",\n  UNREADY = \"UNREADY\",\n  QUIT = \"QUIT\",\n  JOINED = \"JOINED\",\n  SELECTED_POKEMON = \"SELECTED_POKEMON\",\n  INCREASE_COMPETITOR_POINTS = \"INCREASE_COMPETITOR_POINTS\",\n  DECREASE_COMPETITOR_POINTS = \"DECREASE_COMPETITOR_POINTS\",\n  FREEZE_COMPETITOR_BOARD = \"FREEZE_COMPETITOR_BOARD\",\n  LEVEL_UP_POINTS = \"LEVEL_UP_POINTS\",\n  GAME_WINNER = \"GAME_WINNER\",\n}\n\nexport enum ChatSocketEvents {\n  MAKE_GAME = \"MAKE_GAME\",\n}\n\nexport enum Direction {\n  LEFT = \"left\",\n  RIGHT = \"right\",\n  TOP = \"top\",\n  BOTTOM = \"bottom\",\n}\n\nexport enum PointType {\n  START = \"start\",\n  END = \"end\",\n  LINE = \"line\",\n}\n\nexport interface PointCoords {\n  rowIndex: number;\n  colIndex: number;\n  direction?: Direction;\n  type?: PointType;\n}\n\nexport interface PokemonCoords extends PointCoords {\n  nid?: string;\n}\n\nexport enum GameLevel {\n  LEVEL_1 = \"1\",\n  LEVEL_2 = \"2\",\n  LEVEL_3 = \"3\",\n  LEVEL_4 = \"4\",\n  LEVEL_5 = \"5\",\n  LEVEL_6 = \"6\",\n  LEVEL_7 = \"7\",\n  LEVEL_8 = \"8\",\n  LEVEL_9 = \"9\",\n  LEVEL_10 = \"10\",\n  LEVEL_11 = \"11\",\n  LEVEL_12 = \"12\",\n  LEVEL_13 = \"13\",\n  LEVEL_14 = \"MAX\",\n}\n\nexport type GameOptions = {\n  [key in GameLevel]: {\n    row: number;\n    col: number;\n  };\n};\n\nexport const gameOptions: GameOptions = {\n  [GameLevel.LEVEL_1]: {\n    row: 3,\n    col: 4,\n  },\n  [GameLevel.LEVEL_2]: {\n    row: 4,\n    col: 4,\n  },\n  [GameLevel.LEVEL_3]: {\n    row: 4,\n    col: 5,\n  },\n  [GameLevel.LEVEL_4]: {\n    row: 4,\n    col: 6,\n  },\n  [GameLevel.LEVEL_5]: {\n    row: 4,\n    col: 7,\n  },\n  [GameLevel.LEVEL_6]: {\n    row: 6,\n    col: 8,\n  },\n  [GameLevel.LEVEL_7]: {\n    row: 7,\n    col: 8,\n  },\n  [GameLevel.LEVEL_8]: {\n    row: 8,\n    col: 8,\n  },\n  [GameLevel.LEVEL_9]: {\n    row: 8,\n    col: 9,\n  },\n  [GameLevel.LEVEL_10]: {\n    row: 8,\n    col: 10,\n  },\n  [GameLevel.LEVEL_11]: {\n    row: 8,\n    col: 11,\n  },\n  [GameLevel.LEVEL_12]: {\n    row: 8,\n    col: 12,\n  },\n  [GameLevel.LEVEL_13]: {\n    row: 9,\n    col: 12,\n  },\n  [GameLevel.LEVEL_14]: {\n    row: 10,\n    col: 12,\n  },\n};\n\nexport const nextLevel = {\n  [GameLevel.LEVEL_1]: GameLevel.LEVEL_2,\n  [GameLevel.LEVEL_2]: GameLevel.LEVEL_3,\n  [GameLevel.LEVEL_3]: GameLevel.LEVEL_4,\n  [GameLevel.LEVEL_4]: GameLevel.LEVEL_5,\n  [GameLevel.LEVEL_5]: GameLevel.LEVEL_6,\n  [GameLevel.LEVEL_6]: GameLevel.LEVEL_7,\n  [GameLevel.LEVEL_7]: GameLevel.LEVEL_8,\n  [GameLevel.LEVEL_8]: GameLevel.LEVEL_9,\n  [GameLevel.LEVEL_9]: GameLevel.LEVEL_10,\n  [GameLevel.LEVEL_10]: GameLevel.LEVEL_11,\n  [GameLevel.LEVEL_11]: GameLevel.LEVEL_12,\n  [GameLevel.LEVEL_12]: GameLevel.LEVEL_13,\n  [GameLevel.LEVEL_13]: GameLevel.LEVEL_14,\n  [GameLevel.LEVEL_14]: GameLevel.LEVEL_14,\n};\n\nexport enum GameBattleEffect {\n  LEVEL_UP = \"LEVEL_UP\",\n  FREEZE = \"FREEZE\",\n}\n\nexport const gameBattleEffect = [\n  GameBattleEffect.LEVEL_UP,\n  GameBattleEffect.FREEZE,\n];\n\nexport const LEVEL_MAX = GameLevel.LEVEL_12;\nexport const LEVEL_BATTLE_MAX = GameLevel.LEVEL_10;\nexport const BASE_START_TIME = 300;\nexport const BASE_START_TIME_EASY = 300;\nexport const BASE_START_TIME_HARD = 200;\nexport const SUGGEST_TIME = 10;\nexport const BONUS_TIME = 2;\nexport const FREEZING_TIME = 3;\nexport const PENALTY_TIME = 5;\nexport const PENDING_TIME = 3;\nexport const PENALTY_POINTS = 5;\nexport const BONUS_POINTS = 5;\nexport const LEVEL_UP_POINTS = 10;\n","import { atom } from \"recoil\";\nimport { GameSound, GameTypeState } from \"../../types/game\";\n\nconst gameSoundState = atom<GameSound>({\n  key: GameTypeState.GAME_SOUND_STATE,\n  default: {\n    soundReady: false,\n    gameSongDuration: 0,\n    playOpenMenuSound: undefined,\n    playEnableSound: undefined,\n    playDisableSound: undefined,\n    playCompletedGameSound: undefined,\n    playFailedGameSound: undefined,\n    playBiteSound: undefined,\n    playRisingPopSound: undefined,\n    playFanfareSound: undefined,\n    playGlugSound: undefined,\n    playNearlyEndTimeSound: undefined,\n    playOffSound: undefined,\n    playOnSound: undefined,\n    playLevelUpSound: undefined,\n    playPopDownSound: undefined,\n    playPopUpOnSound: undefined,\n    playPopUpOffSound: undefined,\n    playYouWinSound: undefined,\n    playGameSong: undefined,\n  },\n});\n\nexport default gameSoundState;\n","import { atom } from \"recoil\";\nimport { PlayerState, GameTypeState } from \"../../types/game\";\n\nconst playerState = atom<PlayerState>({\n  key: GameTypeState.PLAYER_STATE,\n  default: {\n    rankingId: \"\",\n    player: \"\",\n    playerTiming: 0,\n  },\n});\n\nexport default playerState;\n","import { nanoid } from \"nanoid\";\nimport {\n  PointCoords,\n  Pokemon,\n  PokemonCoords,\n  Direction,\n  PointType,\n  nextLevel,\n  GameLevel,\n  gameBattleEffect,\n} from \"../types/game\";\n\nconst BASE_URL =\n  \"assets/images/\";\n\nexport let pokemonList: Pokemon[] = [\n  { id: \"poke-0\", matched: false, image: `${BASE_URL}1.png` },\n  { id: \"poke-1\", matched: false, image: `${BASE_URL}2.png` },\n  { id: \"poke-2\", matched: false, image: `${BASE_URL}3.png` },\n  { id: \"poke-3\", matched: false, image: `${BASE_URL}4.png` },\n  { id: \"poke-5\", matched: false, image: `${BASE_URL}5.png` },\n  { id: \"poke-4\", matched: false, image: `${BASE_URL}6.png` },\n  { id: \"poke-6\", matched: false, image: `${BASE_URL}7.png` },\n  { id: \"poke-7\", matched: false, image: `${BASE_URL}8.png` },\n  { id: \"poke-8\", matched: false, image: `${BASE_URL}9.png` },\n  { id: \"poke-9\", matched: false, image: `${BASE_URL}10.png` },\n  { id: \"poke-10\", matched: false, image: `${BASE_URL}11.png` },\n  { id: \"poke-11\", matched: false, image: `${BASE_URL}12.png` },\n  { id: \"poke-12\", matched: false, image: `${BASE_URL}13.png` },\n  { id: \"poke-13\", matched: false, image: `${BASE_URL}14.png` },\n  { id: \"poke-14\", matched: false, image: `${BASE_URL}15.png` },\n  { id: \"poke-15\", matched: false, image: `${BASE_URL}16.png` },\n  { id: \"poke-16\", matched: false, image: `${BASE_URL}17.png` },\n  { id: \"poke-17\", matched: false, image: `${BASE_URL}18.png` },\n  { id: \"poke-18\", matched: false, image: `${BASE_URL}19.png` },\n  { id: \"poke-19\", matched: false, image: `${BASE_URL}20.png` },\n  { id: \"poke-20\", matched: false, image: `${BASE_URL}21.png` },\n  { id: \"poke-21\", matched: false, image: `${BASE_URL}22.png` },\n  { id: \"poke-22\", matched: false, image: `${BASE_URL}23.png` },\n  { id: \"poke-23\", matched: false, image: `${BASE_URL}24.png` },\n  { id: \"poke-24\", matched: false, image: `${BASE_URL}25.png` },\n  { id: \"poke-25\", matched: false, image: `${BASE_URL}26.png` },\n  { id: \"poke-26\", matched: false, image: `${BASE_URL}27.png` },\n  { id: \"poke-27\", matched: false, image: `${BASE_URL}28.png` },\n  { id: \"poke-28\", matched: false, image: `${BASE_URL}29.png` },\n  { id: \"poke-29\", matched: false, image: `${BASE_URL}30.png` },\n  { id: \"poke-30\", matched: false, image: `${BASE_URL}31.png` },\n  { id: \"poke-31\", matched: false, image: `${BASE_URL}32.png` },\n  { id: \"poke-32\", matched: false, image: `${BASE_URL}33.png` },\n  { id: \"poke-33\", matched: false, image: `${BASE_URL}34.png` },\n  { id: \"poke-34\", matched: false, image: `${BASE_URL}35.png` },\n  { id: \"poke-35\", matched: false, image: `${BASE_URL}36.png` },\n  { id: \"poke-36\", matched: false, image: `${BASE_URL}37.png` },\n  { id: \"poke-37\", matched: false, image: `${BASE_URL}38.png` },\n  { id: \"poke-38\", matched: false, image: `${BASE_URL}39.png` },\n  { id: \"poke-39\", matched: false, image: `${BASE_URL}40.png` },\n];\n\nconst convertObjectToArrayList = <Model>(\n  objectList: Record<string, Model>\n): Model[] => {\n  const arrayList: Model[] = [];\n  Object.keys(objectList).map((key) => {\n    arrayList.push(objectList[key]);\n    return key;\n  });\n  return arrayList;\n};\n\nexport const shufflePokemonList = (nonShuffleList: Pokemon[]) => {\n  const shuffledPokemonList = nonShuffleList.sort(() => Math.random() - 0.5);\n  const shuffledlistPokemon: Record<string, Pokemon> = {};\n  shuffledPokemonList.map((pokemon) => {\n    const nid = nanoid();\n    shuffledlistPokemon[nid] = pokemon;\n    return pokemon;\n  });\n\n  return shuffledlistPokemon;\n};\n\nexport const reShufflePokemonList = (pokemonList: Record<string, Pokemon>) => {\n  const arrayPokemons = convertObjectToArrayList(pokemonList);\n\n  return shufflePokemonList(arrayPokemons);\n};\n\nexport const makeListPokemons = (row: number, col: number) => {\n  const clonePokemonList: Pokemon[] = pokemonList.sort(\n    () => Math.random() - 0.5\n  );\n  // pokemonList.map((pokemon) => {\n  //   clonePokemonList.push(pokemon);\n  //   return pokemon;\n  // });\n  const total = (row * col) / 4;\n  const slicePokemonList = clonePokemonList.slice(0, total);\n  const nonShufflePokemonList = [\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n  ];\n\n  return shufflePokemonList(nonShufflePokemonList);\n};\n\nexport const generatePokemonMatrix = (\n  pokemons: Record<string, Pokemon>,\n  rowSetting: number = 8,\n  colSetting: number = 10\n): { pokemonMatrix: Pokemon[][]; pokemons: Record<string, Pokemon> } => {\n  const newPokemons = { ...pokemons };\n  const totalCol = colSetting + 2;\n  const totalRow = rowSetting + 2;\n  const pokemonKeys = Object.keys(pokemons);\n  const pokemonMatrix: Pokemon[][] = [];\n\n  for (let row = 0; row < totalRow; row++) {\n    if (pokemonMatrix[row] === undefined) pokemonMatrix[row] = [];\n    for (let col = 0; col < totalCol; col++) {\n      if (\n        row === 0 ||\n        row === totalRow - 1 ||\n        col === 0 ||\n        col === totalCol - 1\n      ) {\n        const id = nanoid();\n        const borderPoint = { nid: id, id, matched: true };\n        pokemonMatrix[row].push(borderPoint);\n      } else {\n        const pokemonKey = pokemonKeys.pop();\n        if (pokemonKey) {\n          const pokemon = {\n            ...newPokemons[pokemonKey],\n            nid: pokemonKey,\n            row,\n            col,\n          };\n          newPokemons[pokemonKey] = {\n            ...newPokemons[pokemonKey],\n            rowIndex: row,\n            colIndex: col,\n          };\n          pokemonMatrix[row].push(pokemon);\n        }\n      }\n    }\n  }\n\n  return { pokemonMatrix, pokemons: newPokemons };\n};\n\nconst cloneMatrix = (matrix: Pokemon[][]) => {\n  const newMatrix = [];\n  const length = matrix.length;\n\n  for (let i = 0; i < length; i++) {\n    newMatrix[i] = matrix[i].slice();\n  }\n\n  return newMatrix;\n};\n\nexport const findPath = (\n  fromPoint: PointCoords,\n  toPoint: PointCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const matrixTotalRow = totalRow + 2;\n  const matrixTotalCol = totalCol + 2;\n  const tempMatrix = cloneMatrix(matrix);\n  const matrixPoints: boolean[][] = [];\n  const matrixTrackingPoints: (PointCoords | undefined)[][] = [];\n\n  for (let rowIndex = 0; rowIndex < matrixTotalRow; ++rowIndex) {\n    matrixPoints.push([]);\n    matrixTrackingPoints.push([]);\n    for (let colIndex = 0; colIndex < matrixTotalCol; ++colIndex) {\n      const pokemon = { ...tempMatrix[rowIndex][colIndex] };\n      matrixPoints[rowIndex].push(pokemon.matched);\n      matrixTrackingPoints[rowIndex].push(undefined);\n    }\n  }\n  const dRow: number[] = [-1, 0, 1, 0];\n  const dCol: number[] = [0, 1, 0, -1];\n  const queue = [];\n  queue.push(toPoint);\n  matrixTrackingPoints[toPoint.rowIndex][toPoint.colIndex] = {\n    rowIndex: -2,\n    colIndex: -2,\n  };\n\n  matrixPoints[fromPoint.rowIndex][fromPoint.colIndex] = true;\n  matrixPoints[toPoint.rowIndex][toPoint.colIndex] = true;\n\n  while (queue.length) {\n    const currentPoint = queue.shift();\n\n    if (currentPoint) {\n      if (\n        currentPoint?.rowIndex === fromPoint.rowIndex &&\n        currentPoint?.colIndex === fromPoint.colIndex\n      ) {\n        break;\n      }\n      for (let index = 0; index < 4; index++) {\n        let rowIndex: number = currentPoint.rowIndex + dRow[index];\n        let colIndex: number = currentPoint.colIndex + dCol[index];\n        while (\n          rowIndex >= 0 &&\n          rowIndex < matrixTotalRow &&\n          colIndex >= 0 &&\n          colIndex < matrixTotalCol &&\n          matrixPoints[rowIndex][colIndex] === true\n        ) {\n          if (matrixTrackingPoints[rowIndex][colIndex] === undefined) {\n            matrixTrackingPoints[rowIndex][colIndex] = currentPoint;\n            queue.push({ rowIndex, colIndex });\n          }\n          rowIndex += dRow[index];\n          colIndex += dCol[index];\n        }\n      }\n    }\n  }\n\n  const trackedPoints: PointCoords[] = [];\n  let trackPoint: PointCoords = { ...fromPoint };\n\n  if (matrixTrackingPoints[trackPoint.rowIndex][trackPoint.colIndex]) {\n    while (trackPoint.rowIndex !== -2 && trackPoint.colIndex !== -2) {\n      trackedPoints.push({\n        rowIndex: trackPoint.rowIndex,\n        colIndex: trackPoint.colIndex,\n      });\n      trackPoint = {\n        ...(matrixTrackingPoints[trackPoint.rowIndex][\n          trackPoint.colIndex\n        ] as PointCoords),\n      };\n    }\n  }\n\n  return trackedPoints;\n};\n\nexport const hasConnectLine = (\n  point1: PokemonCoords,\n  point2: PokemonCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const pathPoints = findPath(point1, point2, matrix, totalRow, totalCol);\n\n  return {\n    connected: pathPoints.length >= 2 && pathPoints.length <= 4,\n    pathPoints,\n  };\n};\n\nexport const checkPointInLine = (\n  connectingLinePoints: PointCoords[],\n  currentPosition: PointCoords\n) => {\n  const { rowIndex, colIndex } = currentPosition;\n\n  return connectingLinePoints.find(\n    (matchingLinePoint) =>\n      matchingLinePoint.rowIndex === rowIndex &&\n      matchingLinePoint.colIndex === colIndex\n  );\n};\n\nexport const drawPath = (\n  pathPoints: PointCoords[],\n  totalRow: number,\n  totalCol: number\n) => {\n  const limitRow = totalRow + 2;\n  const limitCol = totalCol + 2;\n  // console.log(pathPoints);\n  return pathPoints.reduce(\n    (newPathPoints, currentPoint, index, arrayPoints) => {\n      let type: PointType = PointType.LINE;\n      let direction: Direction | undefined = undefined;\n      const nextIndex = index + 1;\n      const prevIndex = index - 1;\n\n      if (arrayPoints[nextIndex] === undefined) {\n        type = PointType.END;\n      }\n\n      if (arrayPoints[prevIndex]) {\n        const prevPoint = arrayPoints[prevIndex];\n        if (prevPoint.rowIndex > currentPoint.rowIndex) {\n          direction = Direction.TOP;\n        } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n          direction = Direction.BOTTOM;\n        } else {\n          if (prevPoint.colIndex > currentPoint.colIndex) {\n            direction = Direction.LEFT;\n          } else if (prevPoint.colIndex < currentPoint.colIndex) {\n            direction = Direction.RIGHT;\n          } else {\n            if (prevPoint.rowIndex > currentPoint.rowIndex) {\n              direction = Direction.TOP;\n            } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n              direction = Direction.BOTTOM;\n            }\n          }\n        }\n\n        let extraPoint: PointCoords | undefined = {\n          ...currentPoint,\n          direction,\n          type: PointType.LINE,\n        };\n\n        // console.log(extraPoint);\n\n        do {\n          switch (extraPoint.direction) {\n            case Direction.BOTTOM:\n              extraPoint.rowIndex--;\n              if (extraPoint.rowIndex < 0) {\n                extraPoint = undefined;\n              }\n\n              break;\n\n            case Direction.TOP:\n              extraPoint.rowIndex++;\n              if (extraPoint.rowIndex >= limitRow) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.LEFT:\n              extraPoint.colIndex++;\n              if (extraPoint.colIndex >= limitCol) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.RIGHT:\n              extraPoint.colIndex--;\n              if (extraPoint.colIndex < 0) {\n                extraPoint = undefined;\n              }\n              break;\n\n            default:\n              break;\n          }\n          if (extraPoint === undefined) {\n            break;\n          }\n          if (\n            extraPoint.rowIndex === prevPoint.rowIndex &&\n            extraPoint.colIndex === prevPoint.colIndex\n          ) {\n            break;\n          }\n\n          newPathPoints.push({ ...extraPoint });\n        } while (extraPoint !== undefined);\n      } else {\n        type = PointType.START;\n      }\n      const newCurrentPoint = { ...currentPoint, direction, type };\n\n      newPathPoints.push(newCurrentPoint);\n\n      return newPathPoints;\n    },\n    [] as PointCoords[]\n  );\n};\n\nexport const checkConnectionSelectedPokemons = (\n  selectedPokemons: PokemonCoords[],\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  rowSetting: number,\n  colSetting: number\n) => {\n  const newPokemons = { ...pokemons };\n  const newSelectedPokemons = [...selectedPokemons];\n  const [selectedPokemon1, selectedPokemon2] = newSelectedPokemons;\n  let connectingLinePoints: PointCoords[] = [];\n  let newMatrix = [...matrix];\n\n  if (\n    selectedPokemon1?.nid &&\n    selectedPokemon2?.nid &&\n    pokemons[selectedPokemon1.nid].id === pokemons[selectedPokemon2.nid].id\n  ) {\n    const { connected, pathPoints } = hasConnectLine(\n      selectedPokemon1,\n      selectedPokemon2,\n      matrix,\n      rowSetting,\n      colSetting\n    );\n\n    if (connected) {\n      connectingLinePoints = drawPath(pathPoints, rowSetting, colSetting);\n\n      newPokemons[selectedPokemon1.nid] = {\n        ...newPokemons[selectedPokemon1.nid],\n        matched: true,\n      };\n      newPokemons[selectedPokemon2.nid] = {\n        ...newPokemons[selectedPokemon2.nid],\n        matched: true,\n      };\n      const { pokemonMatrix } = generatePokemonMatrix(\n        newPokemons,\n        rowSetting,\n        colSetting\n      );\n      newMatrix = pokemonMatrix;\n    } else {\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n\n    newSelectedPokemons.length = 0;\n  } else {\n    if (selectedPokemons.length === 2) {\n      newSelectedPokemons.length = 0;\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n  }\n\n  return {\n    newSelectedPokemons,\n    newMatrix,\n    newPokemons,\n    connectingLinePoints,\n  };\n};\n\nexport const checkCompletedLevel = (pokemons: Record<string, Pokemon>) => {\n  return (\n    Object.keys(pokemons).length &&\n    Object.entries(pokemons).findIndex(\n      ([_, pokemon]) => pokemon.matched === false\n    ) === -1\n  );\n};\n\nexport const hasAnyConnectLine = (\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  let foundConnectLine = false;\n  let fromPoint: PointCoords | undefined = undefined;\n  let toPoint: PointCoords | undefined = undefined;\n  const entriesPokemons = Object.entries(pokemons);\n\n  while (entriesPokemons.length) {\n    const entryPokemon = entriesPokemons.pop();\n\n    if (entryPokemon === undefined) {\n      break;\n    }\n    const [nid, currentPokemon] = entryPokemon;\n\n    if (currentPokemon.matched === false) {\n      foundConnectLine = entriesPokemons.some(([nid, pokemon]) => {\n        if (currentPokemon.id === pokemon.id && pokemon.matched === false) {\n          const { connected } = hasConnectLine(\n            currentPokemon as PointCoords,\n            pokemon as PointCoords,\n            matrix,\n            totalRow,\n            totalCol\n          );\n\n          if (connected) {\n            if (currentPokemon.rowIndex && currentPokemon.colIndex) {\n              fromPoint = {\n                rowIndex: currentPokemon.rowIndex,\n                colIndex: currentPokemon.colIndex,\n              };\n            }\n            if (pokemon.rowIndex && pokemon.colIndex) {\n              toPoint = {\n                rowIndex: pokemon.rowIndex,\n                colIndex: pokemon.colIndex,\n              };\n            }\n          }\n\n          return connected;\n        }\n\n        return false;\n      });\n      if (foundConnectLine) {\n        break;\n      }\n    }\n  }\n\n  return { foundConnectLine, fromPoint, toPoint };\n};\n\nexport function getPlayerName(player: string) {\n  return player.replace(/-.*$/g, \"\");\n}\n\nexport function getPlayerID(player: string) {\n  return player.replace(/^.*-/g, \"\");\n}\n\nexport function randomLevel() {\n  const index = Math.floor(Math.random() * Object.keys(nextLevel).length) + 1;\n  const level = `LEVEL_${index}` as GameLevel;\n  return nextLevel[level];\n}\n\nexport function randomEffectEvent() {\n  const index = Math.floor(Math.random() * gameBattleEffect.length);\n  return gameBattleEffect[index];\n}\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { getPlayerID, getPlayerName } from \"../utils/game\";\n\nconst Welcome = () => {\n  const { t } = useTranslation();\n\n  const { player } = useRecoilValue(playerState);\n  return (\n    <>\n      <h2 className=\"text-center\" style={{ color: '#A80000' }}>\n        {t(\"Welcome\")}, {getPlayerName(player)}\n      </h2>\n    </>\n  );\n};\n\nexport default Welcome;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport Welcome from \"../components/Welcome\";\nimport styles from './MainPage.module.css';\n\nconst MainPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className={styles.background}>\n      <div className={styles.overlay}>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>THE C.I.U - Pika pika! - Main board</title>\n        </Helmet>\n        <h1 className={styles.title}>Pika Pika!</h1>\n        <nav className={styles.navigation}>\n          <Welcome />\n          <Link to={Routes.SURVIVAL_MODE_EASY_PAGE}>\n            <button className={styles.button} onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              \"{t(\"Play\")}\"\n            </button>\n          </Link>\n        </nav>\n      </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n","const BASE_API = \"https://pokemon-socket.ldktech.com\";\n// const BASE_API = \"http://localhost:8080\";\n\nexport default BASE_API;\n","import { Response } from \"../hooks/useAsync\";\nimport { GameMode } from \"../types/game\";\nimport BASE_API from \"./CONSTANTS\";\n\nexport type TopPlayer = {\n  _id?: string;\n  timing?: number;\n  player: string;\n  mode: GameMode;\n  timestamp: number;\n};\n\nexport interface TopPlayersResponse extends Response {\n  data: TopPlayer[];\n}\n\nexport interface InsertedTopPlayerResponse extends Response {\n  data?: {\n    InsertedID: string;\n  };\n  id: string;\n}\n\nconst defaultFetchOptions: RequestInit = {\n  method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n  mode: \"cors\", // no-cors, *cors, same-origin\n  cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n  credentials: \"same-origin\", // include, *same-origin, omit\n  headers: {\n    \"Content-Type\": \"application/json\",\n    // 'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  redirect: \"follow\", // manual, *follow, error\n  referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n};\n\nconst getTopRanking = (mode: GameMode): Promise<TopPlayersResponse> => {\n  return fetch(`${BASE_API}/rankings?mode=${mode}`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst addNewRanking = (data: TopPlayer): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = { ...defaultFetchOptions, body: JSON.stringify(data) };\n  return fetch(`${BASE_API}/rankings`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst updateNewRanking = (\n  id: string,\n  data: TopPlayer\n): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = {\n    ...defaultFetchOptions,\n    method: \"PUT\",\n    body: JSON.stringify(data),\n  };\n  return fetch(`${BASE_API}/rankings/${id}`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getTopRanking, addNewRanking, updateNewRanking };\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport type ResponseData = Record<string, any> | null;\n\nexport interface Response {\n  success: boolean;\n  message: string;\n  data?: ResponseData;\n  error?: string;\n}\n\nexport interface ResponseError extends Response {\n  error?: string;\n}\n\nexport enum ResponseStatus {\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n  IDLE = \"idle\",\n  PENDING = \"pending\",\n}\n\n// Hook\nconst useAsync = <T extends Response, E = string>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<ResponseStatus>(ResponseStatus.IDLE);\n  const [value, setValue] = useState<T | ResponseData>(null);\n  const [error, setError] = useState<E | ResponseError | null>(null);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(ResponseStatus.PENDING);\n    setValue(null);\n    setError(null);\n    return asyncFunction()\n      .then((response: T) => {\n        if (response) {\n          setValue(response);\n        }\n        setStatus(ResponseStatus.SUCCESS);\n      })\n      .catch((error: ResponseError) => {\n        if (error) {\n          setError(error);\n        }\n        setStatus(ResponseStatus.ERROR);\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n  return { execute, status, value, error };\n};\n\nexport default useAsync;\n","export function timeConvert(num: number) {\n  if (num <= 0) {\n    return \"00:00\";\n  }\n  const hours = Math.floor(num / 60);\n  const minutes = num % 60;\n  return (\n    hours.toString().padStart(2, \"0\") +\n    \":\" +\n    minutes.toString().padStart(2, \"0\")\n  );\n}\n\nexport function dateTimeFromTimestamp(timestamp: number) {\n  const dateObject = new Date(timestamp);\n\n  return dateObject.toLocaleString();\n}\n","import { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TopPlayer, TopPlayersResponse } from \"../../api/ranking\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport { dateTimeFromTimestamp, timeConvert } from \"../../utils/time\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport { GameMode } from \"../../types/game\";\n\ntype TopListProps = {\n  fetch: () => Promise<TopPlayersResponse>;\n  mode: GameMode;\n};\n\nconst TopList: FC<TopListProps> = ({ fetch, mode }) => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { status, value: topPlayersResponse, error } = useAsync(fetch);\n\n  return (\n    <>\n      {topPlayersResponse &&\n        topPlayersResponse.data === null &&\n        (mode === GameMode.SPEED_MODE ? (\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound && playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ) : (\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound && playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ))}\n      <ol className=\"rank-list\">\n        {status === ResponseStatus.SUCCESS && topPlayersResponse?.data ? (\n          topPlayersResponse?.data?.map(\n            (topPlayer: TopPlayer, index: number) =>\n              topPlayer.timing && (\n                <li key={`id-${index}`}>\n                  {topPlayer.player} - {timeConvert(topPlayer.timing)} -{\" \"}\n                  {dateTimeFromTimestamp(topPlayer.timestamp)}\n                </li>\n              )\n          )\n        ) : (\n          <li>{t(\"Service is under maintenance\")}</li>\n        )}\n        {status === ResponseStatus.ERROR && error && (\n          <p className=\"has-error\">{error}</p>\n        )}\n      </ol>\n    </>\n  );\n};\n\nexport default TopList;\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { getTopRanking } from \"../api/ranking\";\nimport { GameMode } from \"../types/game\";\nimport TopList from \"./Rank/TopList\";\n\nconst RankBoard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"max-screen-container rank-board\">\n      <h1>{t(\"Top players\")}</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The longest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SURVIVAL_MODE)}\n            mode={GameMode.SURVIVAL_MODE}\n          />\n        </div>\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The fastest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SPEED_MODE)}\n            mode={GameMode.SPEED_MODE}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RankBoard, () => true);\n","import { atom } from \"recoil\";\nimport {\n  GameStatus,\n  GameState,\n  GameTypeState,\n  GameLevel,\n} from \"../../types/game\";\n\nconst gameState = atom<GameState>({\n  key: GameTypeState.GAME_STATE,\n  default: {\n    status: GameStatus.PENDING,\n    row: 3,\n    col: 4,\n    pokemons: {},\n    matrix: [],\n    level: GameLevel.LEVEL_1,\n    remainingTime: 0,\n  },\n});\n\nexport default gameState;\n","import { atom } from \"recoil\";\nimport { GameOverlayState, GameTypeState } from \"../../types/game\";\n\nconst gameOverlayState = atom<GameOverlayState>({\n  key: GameTypeState.GAME_OVERLAY_STATE,\n  default: {\n    connectingLinePoints: [],\n    suggestPoints: [undefined, undefined],\n    freezing: false,\n  },\n});\n\nexport default gameOverlayState;\n","import { atom } from \"recoil\";\nimport { GameTypeState, PokemonCoords } from \"../../types/game\";\n\nconst selectedPokemonsState = atom<PokemonCoords[]>({\n  key: GameTypeState.SELECTED_POKEMONS,\n  default: [],\n});\n\nexport default selectedPokemonsState;\n","import { selector } from \"recoil\";\nimport { GameSelector, PokemonCoords } from \"../../types/game\";\nimport { checkConnectionSelectedPokemons } from \"../../utils/game\";\nimport gameState from \"../atoms/gameState\";\nimport gameOverlayState from \"../atoms/gameOverlayState\";\nimport selectedPokemonsState from \"../atoms/selectedPokemonsState\";\n\nconst selectedPokemonsSelector = selector({\n  key: GameSelector.SELECTED_POKEMONS_SELECTOR,\n  get: ({ get }) => {\n    const selectedPokemons = get(selectedPokemonsState);\n    return selectedPokemons;\n  },\n  set: ({ set, get }, newValue) => {\n    const { row, col, status, matrix, pokemons, level } = get(gameState);\n    const selectedPokemons = get(selectedPokemonsState);\n\n    const cloneSelectedPokemons = [...selectedPokemons];\n    cloneSelectedPokemons.push(newValue as PokemonCoords);\n\n    const {\n      connectingLinePoints,\n      newMatrix,\n      newPokemons,\n      newSelectedPokemons,\n    } = checkConnectionSelectedPokemons(\n      cloneSelectedPokemons,\n      pokemons,\n      matrix,\n      row,\n      col\n    );\n\n    if (connectingLinePoints.length >= 1) {\n      if (connectingLinePoints.length > 1) {\n        set(gameState, {\n          row,\n          col,\n          status,\n          level,\n          matrix: newMatrix,\n          pokemons: newPokemons,\n        });\n      }\n      set(gameOverlayState, {\n        suggestPoints: [undefined, undefined],\n        connectingLinePoints,\n      });\n    }\n\n    set(selectedPokemonsState, newSelectedPokemons);\n  },\n});\n\nexport default selectedPokemonsSelector;\n","import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useCallback } from \"react\";\nimport { GameLevel, GameMode, gameOptions, GameStatus } from \"../types/game\";\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\nimport { addNewRanking, TopPlayer, updateNewRanking } from \"../api/ranking\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { nanoid } from \"nanoid\";\n\nexport function useGameActions(mode: GameMode) {\n  const setGame = useSetRecoilState(gameState);\n  const setPlayer = useSetRecoilState(playerState);\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\n  const resetGameState = useResetRecoilState(gameState);\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\n  const { playBiteSound, playFanfareSound, playNearlyEndTimeSound, playYouWinSound } =\n    useRecoilValue(gameSoundState);\n\n  const selectPokemon = (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => {\n    playBiteSound && playBiteSound();\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\n  };\n\n  const resetGame = () => {\n    resetGameState();\n    resetGameOverlayState();\n    resetSelectedPokemonsState();\n  };\n\n  const initGame = useCallback(\n    (level: GameLevel, status: GameStatus = GameStatus.PENDING) => {\n      const { row, col } = gameOptions[level];\n      const pokemons = makeListPokemons(row, col);\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n        pokemons,\n        row,\n        col\n      );\n      setGame({\n        pokemons: newPokemons,\n        matrix: pokemonMatrix,\n        level,\n        row,\n        col,\n        status,\n      });\n      // setPlayer((currentPlayer) => ({ ...currentPlayer, playerTiming: 0 }));\n    },\n    [setGame]\n  );\n\n  const replayGame = (player: string) => {\n    // playFanfareSound && playFanfareSound();\n    initGame(GameLevel.LEVEL_1);\n    // addNewRankingScore(mode, player);\n  };\n\n  const endGame = (isWin: boolean = false) => {\n    if (mode === GameMode.SURVIVAL_MODE) {\n      if (isWin) {\n        playYouWinSound && playYouWinSound();\n      } else {\n        playNearlyEndTimeSound && playNearlyEndTimeSound();\n      }\n      setGame((prevGame) => ({\n        ...prevGame,\n        status: GameStatus.COMPLETED,\n      }));\n    }\n  };\n\n  const addNewRankingScore = (mode: GameMode, player: string) => {\n    const playerScore: TopPlayer = {\n      mode,\n      player,\n      timestamp: Date.now(),\n    };\n    addNewRanking(playerScore).then((response) => {\n      setPlayer((prevPlayer) => ({\n        ...prevPlayer,\n        rankingId: response.id ?? nanoid(),\n      }));\n    });\n  };\n\n  const updateNewRankingScore = (\n    id: string,\n    mode: GameMode,\n    player: string,\n    timing: number\n  ) => {\n    const playerScore: TopPlayer = {\n      mode,\n      player,\n      timing,\n      timestamp: Date.now(),\n    };\n    updateNewRanking(id, playerScore);\n  };\n\n  const startGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.RUNNING,\n    }));\n  };\n\n  return {\n    initGame,\n    replayGame,\n    startGame,\n    endGame,\n    selectPokemon,\n    resetGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  };\n}\n","import { useState } from \"react\";\n\n// Hook\nexport default function useLocalStorage(key: string, initialValue: string) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    // the translations\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: {\n          English: \"English\",\n          Vietnamese: \"Vietnamese\",\n          Back: \"Back\",\n          Replay: \"Replay\",\n          Language: \"Language\",\n          Level: \"Level\",\n          Welcome: \"Welcome\",\n          Congratulations: \"Congratulations\",\n          Submit: \"Submit\",\n          Out: \"Out\",\n          Quit: \"Quit\",\n          Ready: \"Ready\",\n          Stop: \"Stop\",\n          You: \"You\",\n          Competitor: \"Competitor\",\n          Join: \"Join\",\n          \"Battle rule\": \"Battle rule\",\n          \"Your points\": \"Your points\",\n          \"Competitor points\": \"Competitor points\",\n          \"The fastest is best\": \"The fastest is best\",\n          \"The longest is best\": \"The longest is best\",\n          \"Your score\": \"Your score\",\n          \"Your time\": \"Your time\",\n          \"Remaining time\": \"Remaining time\",\n          \"New game ID just created\": \"New game just created ID - `{{gameId}}`\",\n          \"Top players\": \"Top players\",\n          \"Single player\": \"Single player\",\n          \"Multi player\": \"Multi player\",\n          \"Main menu\": \"Main menu\",\n          \"Speed mode\": \"Speed mode\",\n          \"Survival mode\": \"Survival mode\",\n          \"Enter match ID\": \"Enter match ID\",\n          \"Click to join\": \"Click to join\",\n          \"Coming soon...\": \"Coming soon...\",\n          \"Scroll down to play\": \"Scroll down to play\",\n          \"Scroll down to chat\": \"Scroll down to chat and find match\",\n          \"Preparing resource...\": \"Preparing resource...\",\n          \"Please complete all levels as fast as you can\":\n            \"Please complete all levels as fast as you can\",\n          \"Try your best not to run out of time as long as possible.\":\n            \"Try your best not to run out of time as long as possible\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Your time will increase when you match a pair of pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Choosing the wrong pair will increase the time\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Choosing the wrong pair will decrease the time\",\n          \"Accept alphabet and digit only.\":\n            \"Accept alphabet, digits and space only.\",\n          \"Please enter your name\": \"Please enter your name\",\n          \"Enter your name here\": \"Enter your name here\",\n          \"Make your own ranking\": \"Make your own ranking\",\n          \"Make match\": \"Make match\",\n          \"Find random match\": \"Find random match\",\n          \"Enter your message here...\": \"Enter your message here...\",\n          \"Service is not available now.\": \"Service is not available now.\",\n          \"Please try again\": \"Please try again\",\n          \"Chat slowly please\": \"Chat slowly please\",\n          \"Please enter the right match ID\": \"Please enter the right match ID\",\n          \"Service is under maintenance\": \"Service is under maintenance\",\n          \"Welcome to pokemon game!\": \"Welcome {{name}} to pokemon game!\",\n          \"Have a good time playing the game.\":\n            \"Have a good time playing the game, {{name}}.\",\n          \"Sorry, I'm trying to connect our service again.\":\n            \"Sorry {{ name }}, I'm trying to connect our service again.\",\n          \"Connect to service failed. Will try again in the next 5s. Please wait for it.\":\n            \"Connect to service failed. Will try again in the next 5s. Please wait for it.\",\n          \"(Help) You can click on a `Game ID` of others to join the match.\":\n            \"(Help) Hi {{name}}, you can click on a `Game ID` of others to join the match.\",\n          \"(Help) Please click on make match to create your own match!\":\n            \"(Help) Hi {{name}}, you click on `Make match` button to create your own match!\",\n          \"If your points are over competitor points 50 points. You are the winner and vice versa.\":\n            \"If your points are over competitor points 50 points. You are the winner and vice versa.\",\n          \"Matched the wrong pair of pokemon, your points will be decreased\":\n            \"Matched the wrong pair of pokemon, your points will be decreased by {{point}} points.\",\n          \"Matched pair of pokemon, your points will be increased\":\n            \"Matched pair of pokemon, your points will be increased by {{point}} points.\",\n          \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy` or `Give points to yourself`\":\n            \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy {{second}} second` or `Give {{point}} points to yourself`\",\n        },\n      },\n      vi: {\n        translation: {\n          English: \"Tiếng Anh\",\n          Vietnamese: \"Tiếng Việt\",\n          Back: \"Quay về\",\n          Replay: \"Chơi lại\",\n          Language: \"Ngôn ngữ\",\n          Level: \"CẤP ĐỘ\",\n          Welcome: \"Chào bạn\",\n          Congratulations: \"Xin chúc mừng\",\n          Submit: \"Nhập\",\n          Out: \"Thoát\",\n          Quit: \"Thoát\",\n          Ready: \"Sẵn sàng\",\n          Stop: \"Dừng\",\n          You: \"Bạn\",\n          Competitor: \"Đối thủ\",\n          Join: \"Tham gia\",\n          \"Battle rule\": \"Luật chơi\",\n          \"Active players\": \"Người chơi\",\n          \"Active games\": \"Trận đấu\",\n          \"Your points\": \"Điểm của bạn\",\n          \"Competitor points\": \"Điểm đối thủ\",\n          \"The fastest is best\": \"Hoàn thành càng sớm, thứ hạng càng cao\",\n          \"The longest is best\":\n            \"Kéo dài thời gian càng lâu, thứ hạng càng cao\",\n          \"Your score\": \"Điểm số của bạn\",\n          \"Your time\": \"Thời gian của bạn\",\n          \"Remaining time\": \"Thời gian còn lại\",\n          \"Top players\": \"Danh sách người chơi hàng đầu\",\n          \"Single player\": \"Cá nhân\",\n          \"Multi player\": \"Đối kháng\",\n          \"Main menu\": \"Màn hình chính\",\n          \"Speed mode\": \"Tốc độ\",\n          \"Survival mode\": \"Sinh tồn\",\n          \"Enter match ID\": \"Nhập ID trận đấu\",\n          \"New game ID just created\":\n            \"Trận đấu mới vừa được tạo ID - `{{gameId}}`\",\n          \"Coming soon...\": \"Đang phát triển...\",\n          \"Click to join\": \"Tham gia\",\n          \"Preparing resource...\": \"Đang chuẩn bị...\",\n          \"Scroll down to play\": \"Lăn chuột xuống để chơi\",\n          \"Scroll down to chat\": \"Lăn chuột xuống để nhắn tin và tìm trận\",\n          \"Please complete all levels as fast as you can\":\n            \"Hãy hoàn thành tất cả cấp độ nhanh nhất có thể \",\n          \"Try your best not to run out of time as long as possible\":\n            \"Cố gắng hết sức để không hết thời gian lâu nhất có thể\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Thời gian của bạn sẽ tăng thêm khi chọn khớp một cặp pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Chọn sai cặp sẽ bị tăng thêm thời gian\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Chọn sai cặp sẽ bị giảm thời gian\",\n          \"Accept alphabet and digit only.\":\n            \"Chỉ chấp nhận chữ cái, chữ số và kí tự trắng.\",\n          \"Please enter your name\": \"Hãy nhập tên của bạn\",\n          \"Enter your name here\": \"Nhập tên bạn tại đây\",\n          \"Make your own ranking\": \"Tạo xếp hạng của bạn\",\n          \"Make match\": \"Tạo trận đấu\",\n          \"Find random match\": \"Tìm trận ngẫu nhiên\",\n          \"Please enter the right match ID\": \"Hãy nhập đúng mã trận đấu\",\n          \"Enter your message here...\": \"Nhập tin nhắn tại đây...\",\n          \"Service is not available now.\": \"Dịch vụ hiện tại không khả dụng.\",\n          \"Please try again\": \"Thử lại\",\n          \"Chat slowly please\": \"Chat chậm lại bạn nhé\",\n          \"Service is under maintenance\": \"Dịch vụ đang được bảo trì\",\n          \"Welcome to pokemon game!\":\n            \"Chào mừng bạn {{name}} đến với trò chơi pokemon!\",\n          \"Have a good time playing the game.\":\n            \"Chúc bạn {{name}} có một khoảng thời gian chơi thoải mái và vui vẻ.\",\n          \"Sorry, I'm trying to connect our service again.\":\n            \"Xin lỗi {{ name }}, Tôi đang cố gắng kết nối dịch vụ trở lại.\",\n          \"Connect to service failed. Will try again in the next 5s. Please wait for it.\":\n            \"Kết nối tới dịch vụ thất bại, sẽ thử lại trong 5s. Vui lòng chờ trong giây lát.\",\n          \"(Help) You can click on a `Game ID` of others to join the match.\":\n            \"(Hỗ trợ) Chào {{name}}, bạn có thể click vào `Game ID` của người khác để tham gia trận đấu.\",\n          \"(Help) Please click on make match to create your own match!\":\n            \"(Hỗ trợ) Chào {{name}}, Bạn hãy bấm nút `Tạo trận` để có thể bắt đầu trận đấu của mình!\",\n          \"If your points are over competitor points 50 points. You are the winner and vice versa.\":\n            \"Nếu điểm của bạn hơn đối thủ cạnh tranh 50 điểm. Bạn là người chiến thắng và ngược lại.\",\n          \"Matched the wrong pair of pokemon, your points will be decreased\":\n            \"Kết hợp sai cặp pokemon, điểm của bạn sẽ bị giảm {{point}} điểm.\",\n          \"Matched pair of pokemon, your points will be increased\":\n            \"Chọn cặp pokemon phù hợp, điểm của bạn sẽ được tăng lên {{point}} điểm\",\n          \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy` or `Give points to yourself`\":\n            \"Mỗi khi tăng cấp bạn sẽ gây 1 trong 2 hiệu ứng `Đóng băng đối phương {{second}} giây` hoặc `Tăng {{point}} điểm cho bản thân`\",\n        },\n      },\n    },\n    lng: \"en\", // if you're using a language detector, do not define the lng option\n    fallbackLng: \"en\",\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport i18n from \"../services/i18n\";\nimport styles from '../pages/MainPage.module.css';\n\nconst SwitchLanguage = () => {\n  const { t } = useTranslation();\n  const { playOffSound } = useRecoilValue(gameSoundState);\n  const [_, setStorageValue] = useLocalStorage(\"language\", \"vi\");\n  const changeLanguage = (lng: \"en\" | \"vi\") => {\n    i18n.changeLanguage(lng);\n    setStorageValue(lng);\n    playOffSound && playOffSound();\n  };\n\n  return (\n    <h5 className={styles.switchLanguage}>\n      {t(\"Language\")}:{\" \"}\n      <strong onClick={() => changeLanguage(\"en\")}>{t(\"English\")}</strong> -{\" \"}\n      <strong onClick={() => changeLanguage(\"vi\")}>{t(\"Vietnamese\")}</strong>\n    </h5>\n  );\n};\n\nexport default SwitchLanguage;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport RankBoard from \"../components/RankBoard\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useGameActions } from \"../hooks/useGameActions\";\nimport { useEffect } from \"react\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useRecoilValue } from \"recoil\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport { GameMode } from \"../types/game\";\nimport Welcome from \"../components/Welcome\";\nimport styles from './SinglePlayerPage.module.css';\n\nconst SinglePlayerPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { resetGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  useEffect(() => {\n    resetGame();\n  }, [resetGame]);\n\n  return (\n    <div className={styles.background}>\n      <div className={styles.overlay}>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>Pika pika! - Single player</title>\n        </Helmet>\n        <h1 className={styles.title}>{t(\"Single player\")}</h1>\n        <Welcome />\n        <div className={styles.form} style={{marginBottom: 24}}>\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button className={styles.button} onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Survival mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button className={styles.button} onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Speed mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.MAIN_PAGE}>\n            <button className={styles.button} onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Back\")}\n            </button>\n          </Link>\n        </div>\n        <RankBoard />\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SinglePlayerPage;\n","export enum ChatTypeState {\n  MESSAGES_STATE = \"MESSAGES_STATE\",\n}\n\nexport type Message = {\n  channel: string;\n  content: string;\n};\n\nexport interface MessagesState {\n  messages: Message[];\n}\n\nexport const DEFAULT_CHANNEL = \"general\";\n\nexport const BASE_WS_URL = \"wss://pokemon-game.ldktech.com/websocket\";\n// export const BASE_WS_URL = \"ws://localhost:8080\";\n","import { atom } from \"recoil\";\nimport { ChatTypeState, MessagesState } from \"../../types/chat\";\n\nconst messagesState = atom<MessagesState>({\n  key: ChatTypeState.MESSAGES_STATE,\n  default: {\n    messages: [],\n  },\n});\n\nexport default messagesState;\n","import { FC, FormEventHandler, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ChatBoxProps {\n  handleSubmit: FormEventHandler<HTMLFormElement>;\n}\n\nconst ChatBox: FC<ChatBoxProps> = ({ handleSubmit }) => {\n  const { t } = useTranslation();\n  const [throttle, setThrottle] = useState(1);\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    if (throttle) {\n      setThrottle(0);\n      handleSubmit(event);\n      setTimeout(() => {\n        setThrottle(1);\n      }, 300);\n    } else {\n      alert(t(\"Chat slowly please\"));\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"message\"\n          placeholder={t(\"Enter your message here...\")}\n          autoFocus\n          autoComplete=\"off\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default ChatBox;\n","import { FC, memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\nimport { dateTimeFromTimestamp } from \"../../utils/time\";\n\ninterface MessageProps {\n  message: string;\n}\n\nconst Message: FC<MessageProps> = ({ message }) => {\n  const { player } = useRecoilValue(playerState);\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  let gameId: string | undefined = undefined;\n  try {\n    const { name, content, timestamp } = JSON.parse(message);\n    const matched = content.match(/ID - `([^`]{8})`$/);\n    if (matched && matched[1]) {\n      gameId = matched[1];\n    }\n    const selfClass = player === name ? \"self\" : \"\";\n    const joinGame = () => {\n      if (gameId) {\n        history.push(Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId));\n      }\n    };\n\n    return (\n      <div className={`message ${selfClass}`}>\n        <small className=\"message-name\">\n          {getPlayerName(name)} <em>(ID: {getPlayerID(name)})</em>\n        </small>\n        <strong className=\"message-content\">\n          {content.replace(/ID - `([^`]{8})`$/, \"\")}{\" \"}\n          {gameId && (\n            <em onClick={joinGame} className=\"button button-join-game\">\n              <span className=\"hidden-mobile\">{t(\"Join\")}:</span> {gameId}\n            </em>\n          )}\n        </strong>\n        <small className=\"message-date\">\n          <em>{dateTimeFromTimestamp(timestamp)}</em>\n        </small>\n      </div>\n    );\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};\n\nfunction isOldMessage(prevProps: MessageProps, nextProps: MessageProps) {\n  return prevProps.message === nextProps.message;\n}\n\nexport default memo(Message, isOldMessage);\n","import { FC, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport { useRecoilState } from \"recoil\";\nimport messagesState from \"../../recoil/atoms/messagesState\";\nimport { nanoid } from \"nanoid\";\n\nconst MessagesBox: FC = () => {\n  const [{ messages }, setMessages] = useRecoilState(messagesState);\n\n  useEffect(() => {\n    const messagesBox = document.getElementById(\"messages-box\");\n    if (messagesBox) {\n      messagesBox.scrollTo({\n        behavior: \"smooth\",\n        top: messagesBox.scrollHeight,\n      });\n    }\n    if (messages.length > 500) {\n      setMessages({ messages: messages.slice(-400) });\n    }\n  }, [messages.length]);\n\n  return (\n    <div id=\"messages-box\" className=\"messages-box\">\n      {messages.map((message, index) => {\n        const nid = nanoid();\n        return message && <Message key={nid} message={message.content} />;\n      })}\n    </div>\n  );\n};\n\nexport default MessagesBox;\n","import { Response } from \"../hooks/useAsync\";\nimport BASE_API from \"./CONSTANTS\";\n\nexport interface ActivePlayersResponse extends Response {\n  data: string[];\n}\n\nconst getActivePlayers = (): Promise<ActivePlayersResponse> => {\n  return fetch(`${BASE_API}/users`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getActivePlayers };\n","export function preventReRender() {\n  return true;\n}\n","import { FC, memo } from \"react\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\n\ninterface ActivePlayer {\n  player: string;\n}\n\nconst ActivePlayer: FC<ActivePlayer> = ({ player }) => {\n  return (\n    <li className=\"active-player\">\n      <strong>{getPlayerName(player)}</strong>\n      <small>\n        <em>ID: {getPlayerID(player)}</em>\n      </small>\n    </li>\n  );\n};\n\nfunction areSameProps(prevProps: ActivePlayer, nextProps: ActivePlayer) {\n  return prevProps.player === nextProps.player;\n}\n\nexport default memo(ActivePlayer, areSameProps);\n","import { memo, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ActivePlayersResponse, getActivePlayers } from \"../../api/user\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { getPlayerID } from \"../../utils/game\";\nimport { preventReRender } from \"../../utils/memo\";\nimport ActivePlayer from \"./ActivePlayer\";\n\nconst ListActivePlayers = () => {\n  const {\n    status,\n    value: activePlayersResponse,\n    error,\n    execute,\n  } = useAsync<ActivePlayersResponse>(getActivePlayers, true);\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      execute();\n    }, 10000);\n\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status]);\n\n  return (\n    <div className=\"active-players-box\">\n      <h3>{t(\"Active players\")}</h3>\n      <ul>\n        {status === ResponseStatus.SUCCESS &&\n          activePlayersResponse?.data?.map(\n            (activePlayer: string, index: number) => (\n              <ActivePlayer\n                player={activePlayer}\n                key={getPlayerID(activePlayer)}\n              />\n            )\n          )}\n      </ul>\n    </div>\n  );\n};\n\nexport default memo(ListActivePlayers, preventReRender);\n","import { atom } from \"recoil\";\nimport { GameTypeState } from \"../../types/game\";\n\nconst gameSupportState = atom<{ supported: boolean; tutorial: boolean }>({\n  key: GameTypeState.GAME_SUPPORT_STATE,\n  default: {\n    supported: false,\n    tutorial: false,\n  },\n});\n\nexport default gameSupportState;\n","import { atom } from \"recoil\";\nimport { ChatSocketState, GameTypeState } from \"../../types/game\";\n\nconst chatSocketState = atom<ChatSocketState>({\n  key: GameTypeState.CHAT_SOCKET_STATE,\n  default: {\n    sendMakeGame: undefined,\n  },\n});\n\nexport default chatSocketState;\n","import { Response } from \"../hooks/useAsync\";\nimport BASE_API from \"./CONSTANTS\";\nimport { ActivePlayersResponse } from \"./user\";\n\nexport interface ActiveGamesResponse extends Response {\n  data: string[];\n}\n\nconst getActiveGames = (): Promise<ActiveGamesResponse> => {\n  return fetch(`${BASE_API}/games`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst getPlayersInGame = (gameId: string): Promise<ActivePlayersResponse> => {\n  return fetch(`${BASE_API}/game/${gameId}`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getActiveGames, getPlayersInGame };\n","import { FC, memo, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { getPlayersInGame } from \"../../api/game\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { Routes } from \"../../routes/CONSTANTS\";\n\ninterface ActiveGame {\n  gameId: string;\n}\n\nconst ActiveGame: FC<ActiveGame> = ({ gameId }) => {\n  const { t } = useTranslation();\n  const fetchPlayersInGame = useCallback(\n    () => getPlayersInGame(gameId),\n    [gameId]\n  );\n  const { status: fetchStatus, value: playersInGameResponse } =\n    useAsync(fetchPlayersInGame);\n\n  const fullGameClass =\n    playersInGameResponse?.data?.length >= 2 ? \"full-slot\" : \"\";\n  return (\n    <>\n      {fetchStatus === ResponseStatus.SUCCESS && (\n        <li className={`active-player ${fullGameClass}`}>\n          <Link to={Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId)}>\n            <button className=\"button-join-game\">\n              <span className=\"hidden-mobile\">{t(\"Join\")}:</span>\n              {gameId}\n            </button>\n          </Link>\n        </li>\n      )}\n    </>\n  );\n};\n\nfunction areSameProps(prevProps: ActiveGame, nextProps: ActiveGame) {\n  return prevProps.gameId === nextProps.gameId;\n}\n\nexport default ActiveGame;\n","import { memo, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ActiveGamesResponse, getActiveGames } from \"../../api/game\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { preventReRender } from \"../../utils/memo\";\nimport ActiveGame from \"./ActiveGame\";\n\nconst ListActiveGames = () => {\n  const {\n    status,\n    value: activeGamesResponse,\n    error,\n    execute,\n  } = useAsync<ActiveGamesResponse>(getActiveGames, true);\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      execute();\n    }, 10000);\n\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status]);\n\n  return (\n    <div className=\"active-players-box\">\n      <h3>{t(\"Active games\")}</h3>\n      <ul>\n        {status === ResponseStatus.SUCCESS &&\n          activeGamesResponse?.data?.map((gameId: string, index: number) => (\n            <ActiveGame gameId={gameId} key={gameId} />\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default memo(ListActiveGames, preventReRender);\n","import {\n  FC,\n  FormEventHandler,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport messagesState from \"../recoil/atoms/messagesState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport ChatBox from \"./Chat/ChatBox\";\nimport MessagesBox from \"./Chat/MessagesBox\";\nimport ListActivePlayers from \"./Chat/ListActivePlayers\";\nimport { BASE_WS_URL, DEFAULT_CHANNEL } from \"../types/chat\";\nimport gameSupportState from \"../recoil/atoms/gameSupportState\";\nimport chatSocketState from \"../recoil/atoms/chatSocketState\";\nimport useChatSocket from \"../hooks/useChatSocket\";\nimport ListActiveGames from \"./Chat/ListActiveGames\";\n\ninterface ChatRoomProps {\n  room: string;\n}\n\nconst ChatRoom: FC<ChatRoomProps> = ({ room }) => {\n  const { t } = useTranslation();\n  const { player } = useRecoilValue(playerState);\n  const [{ supported }, setGameSupport] = useRecoilState(gameSupportState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const setMessagesState = useSetRecoilState(messagesState);\n  const setChatSocketState = useSetRecoilState(chatSocketState);\n  const [socketUrl] = useState(`${BASE_WS_URL}/chat`);\n  const { sendJsonMessage, readyState, lastJsonMessage, lastMessage } =\n    useWebSocket(socketUrl, {\n      reconnectAttempts: 30,\n      reconnectInterval: 5000,\n      retryOnError: true,\n      shouldReconnect: () => true,\n      queryParams: {\n        username: player,\n      },\n      onOpen: () => {\n        setTimeout(() => {\n          const helpMessage = {\n            command: 2,\n            channel: DEFAULT_CHANNEL,\n            name: \"PokeBot\",\n            content: t(\"Welcome to pokemon game!\", { name: player }),\n            timestamp: Date.now(),\n          };\n          sendJsonMessage(helpMessage);\n          if (supported === false) {\n            setTimeout(() => {\n              const helpMessage = {\n                command: 2,\n                channel: DEFAULT_CHANNEL,\n                name: \"PokeBot\",\n                content: t(\n                  \"(Help) Please click on make match to create your own match!\",\n                  {\n                    name: player,\n                  }\n                ),\n                timestamp: Date.now(),\n              };\n              setMessagesState(({ messages }) => ({\n                messages: [\n                  ...messages,\n                  {\n                    content: JSON.stringify(helpMessage),\n                    channel: DEFAULT_CHANNEL,\n                  },\n                ],\n              }));\n              setTimeout(() => {\n                const helpMessage = {\n                  command: 2,\n                  channel: DEFAULT_CHANNEL,\n                  name: \"PokeBot\",\n                  content: t(\n                    \"(Help) You can click on a `Game ID` of others to join the match.\",\n                    {\n                      name: player,\n                    }\n                  ),\n                  timestamp: Date.now(),\n                };\n                setMessagesState(({ messages }) => ({\n                  messages: [\n                    ...messages,\n                    {\n                      content: JSON.stringify(helpMessage),\n                      channel: DEFAULT_CHANNEL,\n                    },\n                  ],\n                }));\n                setGameSupport((gameSupport) => ({\n                  ...gameSupport,\n                  supported: true,\n                }));\n              }, 5000);\n            }, 5000);\n          }\n        }, 5000);\n      },\n      onMessage: (event) => {\n        playPopUpOnSound && playPopUpOnSound();\n      },\n      onClose: () => {\n        const closeMessage = {\n          command: 2,\n          channel: DEFAULT_CHANNEL,\n          name: \"PokeBot\",\n          content: t(\"Sorry, I'm trying to connect our service again.\", {\n            name: player,\n          }),\n          timestamp: Date.now(),\n        };\n        setMessagesState(({ messages }) => ({\n          messages: [\n            ...messages,\n            { content: JSON.stringify(closeMessage), channel: DEFAULT_CHANNEL },\n          ],\n        }));\n      },\n      onError: () => {\n        const closeMessage = {\n          command: 2,\n          channel: DEFAULT_CHANNEL,\n          name: \"PokeBot\",\n          content: t(\n            \"Connect to service failed. Will try again in the next 5s. Please wait for it.\"\n          ),\n          timestamp: Date.now(),\n        };\n        setMessagesState(({ messages }) => ({\n          messages: [\n            ...messages,\n            { content: JSON.stringify(closeMessage), channel: DEFAULT_CHANNEL },\n          ],\n        }));\n      },\n    });\n\n  const reTryConnectSocket = () => {\n    window.location.reload();\n  };\n\n  const { sendMakeGame } = useChatSocket({\n    sendJsonMessage,\n    player,\n  });\n\n  useEffect(() => {\n    setChatSocketState((chatSocketState) => ({\n      ...chatSocketState,\n      sendMakeGame,\n    }));\n  }, [sendMakeGame]);\n\n  useEffect(() => {\n    lastJsonMessage &&\n      setMessagesState(({ messages }) => ({\n        messages: [...messages, lastJsonMessage],\n      }));\n  }, [lastMessage]);\n\n  const handleClickSendMessage = useCallback((message) => {\n    const messageJson = {\n      command: 2,\n      channel: DEFAULT_CHANNEL,\n      name: player,\n      content: message,\n      timestamp: Date.now(),\n    };\n    // playPopUpOnSound();\n    sendJsonMessage(messageJson);\n  }, []);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const inputMessage = event.currentTarget.message;\n    inputMessage.setAttribute(\"disabled\", \"true\");\n    const message = inputMessage.value.replace(\n      /\\b(dit|du|fuck|cu|dcm|dm|dcm|cat)\\b/g,\n      \"*\"\n    );\n    if (message && message.trim() !== \"\") {\n      handleClickSendMessage(message.replaceAll(\"`\", \"\"));\n      inputMessage.value = \"\";\n    } else {\n      alert(t(\"Please enter your message\"));\n    }\n    inputMessage.removeAttribute(\"disabled\");\n    inputMessage.focus();\n  };\n\n  return (\n    <div className=\"chat-room\">\n      <div className=\"chat-container\">\n        <div className=\"chat-box-container\">\n          <MessagesBox />\n          {readyState === ReadyState.OPEN && (\n            <ChatBox handleSubmit={handleSubmit} />\n          )}\n          {[\n            ReadyState.CLOSED,\n            ReadyState.CLOSING,\n            ReadyState.CONNECTING,\n          ].includes(readyState) && (\n            <div className=\"service-status\">\n              {t(\"Service is not available now.\")}\n              <strong className=\"clickable\" onClick={reTryConnectSocket}>\n                {t(\"Please try again\")}\n              </strong>\n            </div>\n          )}\n        </div>\n        <div className=\"active-boxes\">\n          <ListActivePlayers />\n          <ListActiveGames />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction areEqualProps(prevProps: ChatRoomProps, nextProps: ChatRoomProps) {\n  return prevProps.room === nextProps.room;\n}\n\nexport default memo(ChatRoom, areEqualProps);\n","import { SendJsonMessage } from \"react-use-websocket/dist/lib/types\";\nimport { DEFAULT_CHANNEL } from \"../types/chat\";\nimport { ChatSocketMessage, SocketCommand } from \"../types/game\";\n\ninterface UseGameBattleSocketProps {\n  sendJsonMessage: SendJsonMessage;\n  player: string;\n}\n\nexport default function useChatSocket({\n  sendJsonMessage,\n  player,\n}: UseGameBattleSocketProps) {\n  const baseMessageJson: ChatSocketMessage = {\n    command: SocketCommand.SEND_MESSAGE,\n    channel: DEFAULT_CHANNEL,\n    name: player,\n  };\n  const sendMakeGame = (message: string) => {\n    const messageJson = {\n      ...baseMessageJson,\n      content: message,\n      timestamp: Date.now(),\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  return {\n    sendMakeGame,\n  };\n}\n","import { ReadyState } from \"react-use-websocket\";\nimport { atom } from \"recoil\";\nimport { GameBattleState, GameTypeState } from \"../../types/game\";\n\nconst gameBattleState = atom<GameBattleState>({\n  key: GameTypeState.GAME_BATTLE_STATE,\n  default: {\n    gameId: undefined,\n    allReady: [],\n    competitor: undefined,\n    winner: undefined,\n    socketStatus: ReadyState.UNINSTANTIATED,\n    sendSelectedPokemon: undefined,\n    sendReadyGame: undefined,\n    sendUnReadyGame: undefined,\n    sendQuitGame: undefined,\n    sendJoinedGame: undefined,\n    sendDecreasePoints: undefined,\n    sendIncreasePoints: undefined,\n    sendGameEffect: undefined,\n    sendGameWinner: undefined,\n  },\n});\n\nexport default gameBattleState;\n","import { nanoid } from \"nanoid\";\nimport { FormEventHandler, KeyboardEventHandler, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport ChatRoom from \"../components/ChatRoom\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport Welcome from \"../components/Welcome\";\nimport chatSocketState from \"../recoil/atoms/chatSocketState\";\nimport gameBattleState from \"../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { DEFAULT_CHANNEL } from \"../types/chat\";\n\nconst MultiPlayerPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { playPopUpOnSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const resetGameBattle = useResetRecoilState(gameBattleState);\n  const { sendMakeGame } = useRecoilValue(chatSocketState);\n\n  useEffect(() => {\n    resetGameBattle();\n  }, []);\n\n  const findRandomMatch = () => {\n    playGlugSound && playGlugSound();\n    alert(t(\"In development\"));\n  };\n\n  const goToGameMatch = () => {\n    playPopUpOnSound && playPopUpOnSound();\n    const gameId = nanoid(8);\n    const message = t(\"New game ID just created\", { gameId });\n    sendMakeGame && sendMakeGame(message);\n\n    setTimeout(() => {\n      history.push(Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId));\n    }, 200);\n  };\n\n  const enterMatchID: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const gameId = event.currentTarget.matchId.value;\n    if (\n      !event.currentTarget.matchId.value ||\n      event.currentTarget.matchId.value.trim() === \"\"\n    ) {\n      playGlugSound && playGlugSound();\n      alert(t(\"Please enter the right match ID\"));\n      return;\n    }\n    history.push(Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId));\n  };\n\n  return (\n    <div className=\"chat-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Multi player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <ChatRoom room={DEFAULT_CHANNEL} />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Multi player\")}</h1>\n          <p className=\"mobile-helper\">{t(\"Scroll down to chat\")}</p>\n          <Welcome />\n        </div>\n        <div>\n          <div className=\"text-center\">\n            <button onClick={goToGameMatch}>{t(\"Make match\")}</button>\n            {/* <button onClick={findRandomMatch}>{t(\"Find random match\")}</button> */}\n            <div className=\"inline-button\">\n              <form onSubmit={enterMatchID}>\n                <input\n                  name=\"matchId\"\n                  maxLength={8}\n                  placeholder={t(\"Enter match ID\")}\n                />\n                <button>{t(\"Join\")}</button>\n              </form>\n            </div>\n            <Link to={Routes.MAIN_PAGE}>\n              <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n                {t(\"Main menu\")}\n              </button>\n            </Link>\n          </div>\n        </div>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default MultiPlayerPage;\n","import { FC, memo } from \"react\";\nimport { GameStatus, Pokemon } from \"../../types/game\";\n\ntype PokemonCardProps = {\n  pokemon: Pokemon;\n  rowIndex: number;\n  colIndex: number;\n  isSelected: number | boolean;\n  status: GameStatus;\n  selectPokemon: (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => void;\n};\n\nconst PokemonCard: FC<PokemonCardProps> = ({\n  pokemon,\n  rowIndex,\n  colIndex,\n  isSelected,\n  status,\n  selectPokemon,\n}) => {\n  const selected = isSelected ? \"selected\" : \"\";\n  const hidden = pokemon.matched ? \"hidden\" : \"\";\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${pokemon.image ?? \"\"})`,\n      }}\n      className={`pokemon-card ${selected} ${hidden}`}\n      onClick={() => {\n        if (\n          !isSelected &&\n          !pokemon.matched &&\n          status === GameStatus.RUNNING &&\n          pokemon.nid\n        ) {\n          selectPokemon(pokemon.nid, rowIndex, colIndex);\n        }\n      }}\n    />\n  );\n};\n\nfunction propsAreEquals(\n  prevProps: PokemonCardProps,\n  nextProps: PokemonCardProps\n) {\n  return (\n    prevProps.pokemon.nid === nextProps.pokemon.nid &&\n    prevProps.pokemon.image === nextProps.pokemon.image &&\n    prevProps.pokemon.matched === nextProps.pokemon.matched &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.status === nextProps.status\n  );\n}\n\nexport default memo(PokemonCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\n\nimport { GameMode, GameStatus, Pokemon } from \"../../types/game\";\nimport PokemonCard from \"./PokemonCard\";\n\ntype PokemonRowProps = {\n  pokemons: Pokemon[];\n  rowIndex: number;\n  mode: GameMode;\n  status: GameStatus;\n};\n\nconst PokemonRow: FC<PokemonRowProps> = ({\n  pokemons,\n  rowIndex,\n  mode,\n  status,\n}) => {\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\n  const { selectPokemon } = useGameActions(mode);\n  return (\n    <>\n      {pokemons.map((pokemon, index) => (\n        <PokemonCard\n          key={`card-${index}`}\n          pokemon={pokemon}\n          rowIndex={rowIndex}\n          colIndex={index}\n          isSelected={\n            pokemon.nid !== undefined &&\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\n          }\n          selectPokemon={selectPokemon}\n          status={status}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PokemonRow;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport {\n  GameLevel,\n  GameMode,\n  GameStatus,\n  LEVEL_MAX,\n  nextLevel,\n  Pokemon,\n} from \"../types/game\";\nimport {\n  generatePokemonMatrix,\n  checkCompletedLevel,\n  hasAnyConnectLine,\n  reShufflePokemonList,\n} from \"../utils/game\";\nimport { useGameActions } from \"./useGameActions\";\n\nexport default function useGameEngine(mode: GameMode) {\n  const location = useLocation();\n  const {\n    playFanfareSound,\n    playLevelUpSound,\n    playCompletedGameSound,\n    playYouWinSound,\n  } = useRecoilValue(gameSoundState);\n  const {\n    initGame,\n    replayGame,\n    endGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  } = useGameActions(mode);\n  const setGame = useSetRecoilState(gameState);\n  const currentPlayer = useRecoilValue(playerState);\n  const { matrix, row, col, status, pokemons, level } =\n    useRecoilValue(gameState);\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\n    const newShufflePokemons = reShufflePokemonList(pokemons);\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n      newShufflePokemons,\n      row,\n      col\n    );\n    setGame({\n      pokemons: newPokemons,\n      matrix: pokemonMatrix,\n      level,\n      row,\n      col,\n      status: GameStatus.RUNNING,\n    });\n  };\n\n  // Setup game\n  useEffect(() => {\n    if (status === GameStatus.PENDING) {\n      // playFanfareSound && playFanfareSound();\n      initGame(level);\n      addNewRankingScore(mode, currentPlayer.player);\n    }\n    return () => {\n      // cleanup\n    };\n  }, [status, initGame]);\n\n  // Check game completed and post result\n  useEffect(() => {\n    if (status === GameStatus.COMPLETED) {\n      if (currentPlayer.rankingId) {\n        updateNewRankingScore(\n          currentPlayer.rankingId,\n          mode,\n          currentPlayer.player,\n          currentPlayer.playerTiming\n        );\n      }\n    }\n  }, [currentPlayer.rankingId, currentPlayer.playerTiming]);\n\n  // Check completed one level and re-start new one higher level\n  useEffect(() => {\n    if (checkCompletedLevel(pokemons)) {\n      const levelUp: GameLevel = nextLevel[level];\n      if (levelUp !== LEVEL_MAX || mode === GameMode.SURVIVAL_MODE) {\n        initGame(levelUp, GameStatus.RUNNING);\n        playCompletedGameSound && playCompletedGameSound();\n      } else {\n        if (mode === GameMode.SPEED_MODE) {\n          playYouWinSound && playYouWinSound();\n          setGame({\n            matrix,\n            row,\n            col,\n            pokemons,\n            level,\n            status: GameStatus.COMPLETED,\n          });\n        }\n      }\n    } else {\n      const { foundConnectLine } = hasAnyConnectLine(\n        pokemons,\n        matrix,\n        row,\n        col\n      );\n      if (Object.keys(pokemons).length && foundConnectLine === false) {\n        shuffleMatrix(pokemons);\n        playLevelUpSound && playLevelUpSound();\n      }\n    }\n  }, [pokemons]);\n\n  // Setup new game if access directly from browser\n  useEffect(() => {\n    if (status === GameStatus.RUNNING) {\n      // playFanfareSound && playFanfareSound();\n      initGame(GameLevel.LEVEL_8);\n    }\n  }, [location]);\n\n  return {\n    initGame,\n    replayGame,\n    endGame,\n    matrix,\n    row,\n    col,\n    status,\n    level,\n  };\n}\n","import PokemonRow from \"./Game/PokemonRow\";\nimport useGameEngine from \"../hooks/useGameEngine\";\nimport { GameMode } from \"../types/game\";\nimport { FC } from \"react\";\n\nconst GameBoard: FC<{ mode: GameMode }> = ({ mode }) => {\n  const { matrix, row, col, status } = useGameEngine(mode);\n  return (\n    <div className={`game-pokemon board-${row}x${col}`}>\n      {matrix &&\n        matrix.map((pokemons, index) => (\n          <PokemonRow\n            mode={mode}\n            key={`row-${index}`}\n            rowIndex={index}\n            pokemons={pokemons}\n            status={status}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import { FC, memo, useEffect, useRef } from \"react\";\nimport { PointCoords } from \"../../types/game\";\n\ntype LineCardProps = {\n  point?: PointCoords;\n  suggested: boolean;\n  rowIndex: number;\n  colIndex: number;\n};\n\nconst LineCard: FC<LineCardProps> = ({\n  point,\n  suggested,\n  rowIndex,\n  colIndex,\n}) => {\n  const type = point && point.type ? `${point.type}-point` : \"\";\n  const direction =\n    point && point.direction ? `${point.direction}-direction` : \"\";\n  const pointClass = point ? `in-line ${direction} ${type}` : \"\";\n  const suggestedClass = suggested ? `suggested` : pointClass;\n  const lineRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    setTimeout(() => {\n      if (lineRef.current) {\n        direction && lineRef.current.classList.remove(direction);\n        type && lineRef.current.classList.remove(type);\n      }\n    }, 300);\n    return () => {};\n  }, [lineRef, direction, type]);\n\n  return (\n    <div ref={lineRef} className={`line-card ${suggestedClass}`}>\n      <strong>\n        {rowIndex},{colIndex}\n      </strong>\n    </div>\n  );\n};\n\nfunction propsAreEquals(prevProps: LineCardProps, nextProps: LineCardProps) {\n  if (prevProps.point === undefined && nextProps.point === undefined) {\n    return prevProps.suggested === nextProps.suggested;\n  }\n\n  return (\n    prevProps.suggested === nextProps.suggested &&\n    prevProps.point?.direction === nextProps.point?.direction &&\n    prevProps.point?.type === nextProps.point?.type\n  );\n}\n\nexport default memo(LineCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { PointCoords, Pokemon } from \"../../types/game\";\nimport { checkPointInLine } from \"../../utils/game\";\nimport LineCard from \"./LineCard\";\n\ntype LineRowProps = {\n  cards: Pokemon[] | number[];\n  rowIndex: number;\n  connectingLinePoints: PointCoords[];\n  suggestPoints: [PointCoords | undefined, PointCoords | undefined];\n};\n\nconst LineRow: FC<LineRowProps> = ({\n  cards,\n  rowIndex,\n  connectingLinePoints,\n  suggestPoints,\n}) => {\n  return (\n    <>\n      {cards.map((_, colIndex) => (\n        <LineCard\n          key={`card-${colIndex}`}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          point={checkPointInLine(connectingLinePoints, { rowIndex, colIndex })}\n          suggested={\n            suggestPoints &&\n            suggestPoints.findIndex(\n              (suggestPoint) =>\n                suggestPoint?.rowIndex === rowIndex &&\n                suggestPoint?.colIndex === colIndex\n            ) >= 0\n          }\n        />\n      ))}\n    </>\n  );\n};\n\nexport default LineRow;\n","import LineRow from \"./Game/LineRow\";\nimport useGameOverlayEngine from \"../hooks/useGameOverlayEngine\";\nimport { useEffect } from \"react\";\nimport { FREEZING_TIME } from \"../types/game\";\n\nconst GameOverlay = () => {\n  const {\n    connectingLinePoints,\n    suggestPoints,\n    matrix,\n    row,\n    col,\n    freezing,\n    setGameOverlayState,\n  } = useGameOverlayEngine();\n\n  const columnCards = new Array(col + 2).fill(false);\n  const freezingClass = freezing ? \"freezing-board\" : \"\";\n\n  useEffect(() => {\n    if (freezing) {\n      setTimeout(() => {\n        setGameOverlayState((gameOverlayState) => ({\n          ...gameOverlayState,\n          freezing: false,\n        }));\n      }, FREEZING_TIME * 1000);\n    }\n  }, [freezing]);\n\n  return (\n    <div className={`game-overlay board-${row}x${col} ${freezingClass}`}>\n      {matrix &&\n        matrix.map((_, index) => (\n          <LineRow\n            key={`row-${index}`}\n            cards={columnCards}\n            rowIndex={index}\n            connectingLinePoints={connectingLinePoints}\n            suggestPoints={suggestPoints}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameOverlay;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\n\nexport default function useGameOverlayEngine() {\n  const [\n    { connectingLinePoints, suggestPoints, freezing },\n    setGameOverlayState,\n  ] = useRecoilState(gameOverlayState);\n  const { matrix, row, col, status } = useRecoilValue(gameState);\n\n  return {\n    connectingLinePoints,\n    suggestPoints,\n    matrix,\n    row,\n    col,\n    status,\n    freezing,\n    setGameOverlayState,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport { LEVEL_MAX } from \"../../types/game\";\n\nconst GameLevel = ({ color = '#D22128' }) => {\n  const { t } = useTranslation();\n  const { level } = useRecoilValue(gameState);\n  const currentLevel = Number.parseInt(level) > Number.parseInt(LEVEL_MAX) ? LEVEL_MAX : level\n  return (\n    <h3 className=\"game-title\" style={{ fontSize: '1.3rem', color: color, boxShadow: 'none' }}>\n      {t(\"Level\")} <span style={{ color: '#D22128', background: '#fff', padding: '4px', borderRadius: '15px', boxShadow: 'rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px' }}>\n        {currentLevel} / {LEVEL_MAX}\n        </span>\n    </h3>\n  );\n};\n\nexport default GameLevel;\n","import { FC, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport {\n  GameMode,\n  GameStatus,\n  PENALTY_TIME,\n  PENDING_TIME,\n  SUGGEST_TIME,\n} from \"../../types/game\";\nimport { timeConvert } from \"../../utils/time\";\nimport gameOverlayState from \"../../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport { hasAnyConnectLine } from \"../../utils/game\";\n\nconst GameTiming: FC<{ hasTiming: boolean }> = ({ hasTiming = false }) => {\n  const { t } = useTranslation();\n  const { status, pokemons, matrix, row, col } = useRecoilValue(gameState);\n  const { playRisingPopSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const [{ connectingLinePoints }, setGameOverlay] =\n    useRecoilState(gameOverlayState);\n  const [timingState, setTimingState] = useState(0);\n  const timing = useRef(0);\n  const suggestTiming = useRef(0);\n  const pendingTiming = useRef(PENDING_TIME);\n  const { startGame } = useGameActions(GameMode.SPEED_MODE);\n\n  // count timing when running, stop when completed\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.PENDING && hasTiming) {\n      timing.current = 0;\n    }\n\n    if (status === GameStatus.RUNNING) {\n      if (hasTiming) {\n        if (suggestTiming.current >= SUGGEST_TIME) {\n          const { foundConnectLine, fromPoint, toPoint } = hasAnyConnectLine(\n            pokemons,\n            matrix,\n            row,\n            col\n          );\n          if (foundConnectLine) {\n            setGameOverlay((gameOverlay) => ({\n              ...gameOverlay,\n              suggestPoints: [fromPoint, toPoint],\n            }));\n          }\n          suggestTiming.current = 0;\n        }\n      }\n      timeoutId = setTimeout(() => {\n        timing.current++;\n        suggestTiming.current++;\n        setTimingState(timingState + 1);\n      }, 1000);\n    }\n\n    // update timing to make score\n    if (status === GameStatus.COMPLETED) {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status, timingState]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | undefined = undefined;\n    if (status === GameStatus.PENDING) {\n      if (hasTiming) {\n        setGameOverlay((gameOverlay) => ({\n          ...gameOverlay,\n          suggestPoints: [undefined, undefined],\n        }));\n      }\n\n      timing.current = 0;\n      pendingTiming.current = PENDING_TIME;\n      const countdownEl = document.getElementById(\"count-down-pending-timing\");\n      if (countdownEl) countdownEl.innerText = pendingTiming.current.toString();\n      intervalId = setInterval(() => {\n        if (pendingTiming.current <= 1) {\n          intervalId && clearInterval(intervalId);\n          pendingTiming.current = PENDING_TIME;\n          startGame();\n        } else {\n          pendingTiming.current--;\n        }\n        const countdownEl = document.getElementById(\n          \"count-down-pending-timing\"\n        );\n        if (countdownEl)\n          countdownEl.innerText = pendingTiming.current.toString();\n      }, 1000);\n    }\n\n    if (status === GameStatus.COMPLETED) {\n      intervalId && clearInterval(intervalId);\n      if (hasTiming) {\n        suggestTiming.current = 0;\n        setPlayer({ ...currentPlayer, playerTiming: timing.current });\n      }\n    }\n    return () => {\n      suggestTiming.current = 0;\n      pendingTiming.current = PENDING_TIME;\n      intervalId && clearInterval(intervalId);\n    };\n  }, [status]);\n\n  // check rule time\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      playGlugSound && playGlugSound();\n      timing.current += PENALTY_TIME;\n    }\n    if (connectingLinePoints.length > 1) {\n      suggestTiming.current = 0;\n      playRisingPopSound && playRisingPopSound();\n    }\n  }, [connectingLinePoints]);\n\n  return (\n    <>\n      {!hasTiming && (\n        <div\n          key=\"count-down\"\n          id=\"count-down-pending-timing\"\n          className=\"overlay-pending-timing\"\n        >\n          {pendingTiming.current}\n        </div>\n      )}\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {timeConvert(timing.current)}\n      </p>\n    </>\n  );\n};\n\nexport default GameTiming;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { GameStatus } from \"../../types/game\";\nimport { getPlayerName } from \"../../utils/game\";\n\nconst GameTitle: FC<{ title: string, win: boolean }> = ({ title, win = true }) => {\n  const { t } = useTranslation();\n  const { player } = useRecoilValue(playerState);\n  const { status } = useRecoilValue(gameState);\n\n  return (\n    <h1 className=\"game-title\" style={{ fontSize: '50px' }}>\n      <img src={win === true ? \"game-title-2.png\" : \"game-title-3.png\"} alt=\"\" />\n    </h1>\n  );\n};\n\nexport default GameTitle;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport styles from '../../pages/MainPage.module.css';\n\nconst GameReplay: FC<{ action: Function }> = ({ action }) => {\n  const { t } = useTranslation();\n  const { player } = useRecoilValue(playerState);\n  return (\n    <p style={{ width: '100%', marginTop: '0px' }}>\n      <button className={styles.button} style={{ fontSize: '15px', padding: '7px' }} onClick={() => action(player)}>{t(\"Replay\")}</button>\n    </p>\n  );\n};\n\nexport default GameReplay;\n","import { FC } from \"react\";\n\nimport { GameMode } from \"../../types/game\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport GameLevel from \"./GameLevel\";\nimport GameTiming from \"./GameTiming\";\nimport GameTitle from \"./GameTitle\";\nimport GameReplay from \"./GameReplay\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GameSpeedInfo: FC<{ hasTiming?: boolean }> = ({ hasTiming = false }) => {\n  const { t } = useTranslation();\n  const { replayGame } = useGameActions(GameMode.SPEED_MODE);\n\n  return (\n    <div className=\"game-info\">\n      <GameTitle title={t(\"Speed mode\")} />\n      <GameLevel />\n      <GameTiming hasTiming={hasTiming} />\n      <GameReplay action={replayGame} />\n    </div>\n  );\n};\n\nexport default GameSpeedInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport GameSpeedInfo from \"../components/Game/GameSpeedInfo\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SpeedModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Speed mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSpeedInfo />\n        <GameOverlay />\n        <GameBoard mode={GameMode.SPEED_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSpeedInfo hasTiming />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Please complete all levels as fast as you can\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will increase the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Back\")}\n          </button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SpeedModePage;\n","import { FC, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport gameOverlayState from \"../../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport {\n  BASE_START_TIME,\n  BASE_START_TIME_EASY,\n  BASE_START_TIME_HARD,\n  BONUS_TIME,\n  GameMode,\n  GameStatus,\n  PENALTY_TIME,\n  PENDING_TIME,\n  SUGGEST_TIME,\n} from \"../../types/game\";\nimport { hasAnyConnectLine } from \"../../utils/game\";\nimport { timeConvert } from \"../../utils/time\";\nimport styles from './GameSurvivalTiming.module.css';\nimport { useParams } from \"react-router-dom\";\n\nconst GameSurvivalTiming: FC<{ hasTiming: boolean }> = ({\n  hasTiming = false,\n}) => {\n  const { level } = useParams<{ level: string }>();\n  const { t } = useTranslation();\n  const { status, pokemons, matrix, row, col } = useRecoilValue(gameState);\n  const setGame = useSetRecoilState(gameState);\n  const { playRisingPopSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const [timingState, setTimingState] = useState(0);\n  const timing = useRef(0);\n  const time = level === \"easy\" ? BASE_START_TIME_EASY : BASE_START_TIME_HARD;\n  const remainTiming = useRef(time);\n  const pendingTiming = useRef(PENDING_TIME);\n  const suggestTiming = useRef(0);\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const { endGame, startGame } = useGameActions(GameMode.SURVIVAL_MODE);\n  const [{ connectingLinePoints }, setGameOverlay] =\n    useRecoilState(gameOverlayState);\n\n  // count timing when running, stop when completed\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.PENDING && hasTiming) {\n      timing.current = 0;\n      remainTiming.current = time;\n    }\n\n    if (status === GameStatus.RUNNING) {\n      if (hasTiming) {\n        if (suggestTiming.current >= SUGGEST_TIME) {\n          const { foundConnectLine, fromPoint, toPoint } = hasAnyConnectLine(\n            pokemons,\n            matrix,\n            row,\n            col\n          );\n          if (foundConnectLine) {\n            setGameOverlay((gameOverlay) => ({\n              ...gameOverlay,\n              suggestPoints: [fromPoint, toPoint],\n            }));\n          }\n          suggestTiming.current = 0;\n        }\n      }\n      if (remainTiming.current <= 0) {\n        if (hasTiming) {\n          endGame();\n        }\n      } else {\n        timeoutId = setTimeout(() => {\n          timing.current++;\n          suggestTiming.current++;\n          remainTiming.current--;\n          setGame((prevGame) => ({\n            ...prevGame,\n            remainingTime: remainTiming.current,\n          }));\n          setTimingState(timingState + 1);\n        }, 1000);\n      }\n    }\n\n    // update timing to make score\n    if (status === GameStatus.COMPLETED) {\n      if (timeoutId) clearTimeout(timeoutId);\n    }\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status, timingState]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | undefined = undefined;\n    if (status === GameStatus.PENDING) {\n      if (hasTiming) {\n        setGameOverlay((gameOverlay) => ({\n          ...gameOverlay,\n          suggestPoints: [undefined, undefined],\n        }));\n      }\n      timing.current = 0;\n      pendingTiming.current = PENDING_TIME;\n      const countdownEl = document.getElementById(\"count-down-pending-timing\");\n      if (countdownEl) countdownEl.innerText = pendingTiming.current.toString();\n      intervalId = setInterval(() => {\n        if (pendingTiming.current <= 1) {\n          intervalId && clearInterval(intervalId);\n          pendingTiming.current = PENDING_TIME;\n          startGame();\n        } else {\n          pendingTiming.current--;\n        }\n        const countdownEl = document.getElementById(\n          \"count-down-pending-timing\"\n        );\n        if (countdownEl)\n          countdownEl.innerText = pendingTiming.current.toString();\n      }, 1000);\n    }\n\n    if (status === GameStatus.COMPLETED) {\n      intervalId && clearInterval(intervalId);\n      if (hasTiming) {\n        setPlayer({ ...currentPlayer, playerTiming: timing.current });\n      }\n    }\n    return () => {\n      pendingTiming.current = PENDING_TIME;\n      intervalId && clearInterval(intervalId);\n    };\n  }, [status]);\n\n  // check rule time\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      playGlugSound && playGlugSound();\n      remainTiming.current -= PENALTY_TIME;\n    }\n    if (connectingLinePoints.length > 1) {\n      playRisingPopSound && playRisingPopSound();\n      remainTiming.current += BONUS_TIME;\n      suggestTiming.current = 0;\n    }\n  }, [connectingLinePoints]);\n\n  return (\n    <>\n      {!hasTiming && (\n        <div id=\"count-down-pending-timing\" className=\"overlay-pending-timing\">\n          {pendingTiming.current}\n        </div>\n      )}\n      <p className={styles.timingText}>\n        <span className={styles.timingInfo}>{t(\"Your time\") + \": \" + timeConvert(remainTiming.current)}</span>\n      </p>\n    </>\n  );\n};\n\nexport default GameSurvivalTiming;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport GameLevel from \"./GameLevel\";\nimport GameSurvivalTiming from \"./GameSurvivalTiming\";\nimport GameTitle from \"./GameTitle\";\n\nconst GameSurvivalInfo: FC<{ hasTiming?: boolean }> = ({\n  hasTiming = false,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"game-info\" style={{ width: '100%' }}>\n      <GameTitle title={t(\"Pika Pika!\")} />\n      <GameLevel />\n      <GameSurvivalTiming hasTiming={hasTiming} />\n    </div>\n  );\n};\n\nexport default GameSurvivalInfo;\n","import { FC, useEffect, useState } from \"react\";\nimport GameReplay from \"./GameReplay\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport { GameMode } from \"../../types/game\";\n\nconst GameSurvivalWinInfo: FC<{ hasTiming?: boolean, isWin: boolean }> = ({\n  hasTiming = false,\n  isWin = false\n}) =>\n{\n  const { replayGame } = useGameActions(GameMode.SURVIVAL_MODE);\n  const [voucherCode, setVoucherCode] = useState<string>('');\n\n  const handleRecaptcha = async () => {\n    try {\n      const response = await fetch(`https://api.theciu.vn/api/minigame/pikachu/get-gift`);\n      const data = await response.json();\n      setVoucherCode(data.data);\n    } catch (error) {\n      console.error('reCAPTCHA error:', error);\n    }\n  }\n\n  const reset = () => {\n    setVoucherCode('');\n    replayGame('');\n  }\n\n  useEffect(() => {\n    if (isWin) {\n      handleRecaptcha();\n    }\n  }, [isWin]);\n\n  return (\n    <>\n      <style>{`\n        .loader {\n          width: 120px;\n          height: 20px;\n          -webkit-mask: linear-gradient(90deg,#000 70%,#0000 0) left/20% 100%;\n          background:\n            linear-gradient(#000 0 0) left -25% top 0 /20% 100% no-repeat\n            #ddd;\n          animation: l7 1s infinite steps(6);\n        }\n        @keyframes l7 {\n          100% {background-position: right -25% top 0}\n        }\n      `}</style>\n      <div className=\"game-info\" style={{ width: '100%' }}>\n        {voucherCode ?\n          <div style={{ position: 'relative' }}>\n            <img src=\"win-popup.png\" style={{ width: '50%', display: 'block', margin: 'auto' }} alt=\"\" />\n            <p style={{\n              position: 'absolute',\n              bottom: '0%',\n              margin: '0',\n              left: '50%',\n              fontSize: '10px',\n              transform: 'translate(-50%, -50%)',\n              border: '1px solid #fff',\n              padding: '0 16px',\n              borderRadius: '16px'\n            }}>{voucherCode}</p>\n          </div>\n        : <div className=\"loader\"></div>}\n        <p style={{ textAlign: 'center', fontSize: '12px', width: '220px', fontWeight: 'bold' }}>Vui lòng chụp màn hình voucher và đưa thu ngân khi thanh toán.</p>\n        <GameReplay action={reset} />\n      </div>\n    </>\n  );\n};\n\nexport default GameSurvivalWinInfo;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport GameLevel from \"./GameLevel\";\nimport GameSurvivalTiming from \"./GameSurvivalTiming\";\nimport GameTitle from \"./GameTitle\";\nimport GameReplay from \"./GameReplay\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport { GameMode, GameStatus } from \"../../types/game\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport { useRecoilValue } from \"recoil\";\n\nconst GameSurvivalLoseInfo: FC<{ hasTiming?: boolean }> = ({\n  hasTiming = false,\n}) =>\n{\n  const { replayGame } = useGameActions(GameMode.SURVIVAL_MODE);\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  console.log(status)\n  return (\n    <div className=\"game-info\" style={{ width: '100%' }}>\n      {status === GameStatus.COMPLETED && <div style={{\n        background: '#fff',\n        color: 'red',\n        fontWeight: 'bold',\n        fontSize: '1.5rem',\n        borderRadius: '2rem',\n        padding: '0.5rem 2rem',\n        textAlign: 'center',\n        display: 'inline-block',\n        margin: '0 auto 1rem auto',\n      }}>\n        OOPS, VOUCHER 50K HỤT MẤT RỒI!\n      </div>}\n      <GameLevel color=\"#fff\"/>\n      {status !== GameStatus.COMPLETED && <GameSurvivalTiming hasTiming={hasTiming} />}\n      <div style={{ marginTop: '1rem' }}></div>\n      <GameReplay action={replayGame} />\n    </div>\n  );\n};\n\nexport default GameSurvivalLoseInfo;\n","import { FC, useEffect, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport { timeConvert } from \"../../utils/time\";\nimport styles from './GameSurvivalTiming.module.css';\n\nconst GameStickySurvivalTiming: FC<{ hasTiming: boolean }> = ({\n  hasTiming = false,\n}) => {\n  const { remainingTime } = useRecoilValue(gameState);\n  const [remainTime, setRemainTime] = useState(remainingTime);\n  useEffect(() => {\n    console.log(remainingTime)\n    if (remainingTime >= 0) {\n      setRemainTime(remainingTime);\n    }\n  }, [remainingTime]);\n  return (\n    <>\n      <p className={styles.timingText} style={{ margin: '0px', fontSize: '11px' }}>\n        <span className={styles.timingInfo}>Còn: {timeConvert(remainTime)}</span>\n      </p>\n    </>\n  );\n};\n\nexport default GameStickySurvivalTiming;\n","import React from 'react';\n\ninterface MinimalizeIconProps {\n  fill?: string;\n  className?: string;\n  width?: string | number;\n  height?: string | number;\n}\n\nconst MinimalizeIcon: React.FC<MinimalizeIconProps> = ({\n  fill = '#000000',\n  className = '',\n  width = 24,\n  height = 24,\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill={fill}\n    width={width}\n    height={height}\n    viewBox=\"0 0 512 512\"\n    className={className}\n  >\n    <g>\n      <g>\n        <path d=\"M0,0v512h512V0H0z M477.867,477.867H34.133V34.133h443.733V477.867z\" />\n      </g>\n    </g>\n    <g>\n      <g>\n        <polygon points=\"126.533,102.4 199.111,102.4 199.111,68.267 68.267,68.267 68.267,199.111 102.4,199.111 102.4,126.538 198.422,222.558 222.556,198.423\" />\n      </g>\n    </g>\n    <g>\n      <g>\n        <polygon points=\"222.557,313.581 198.422,289.445 102.4,385.467 102.4,312.889 68.267,312.889 68.267,443.733 199.111,443.733 199.111,409.6 126.538,409.6\" />\n      </g>\n    </g>\n    <g>\n      <g>\n        <polygon points=\"409.6,312.889 409.6,385.467 313.578,289.444 289.444,313.578 385.462,409.6 312.889,409.6 312.889,443.733 443.733,443.733 443.733,312.889\" />\n      </g>\n    </g>\n    <g>\n      <g>\n        <polygon points=\"312.889,68.267 312.889,102.4 385.467,102.4 289.444,198.423 313.578,222.558 409.6,126.538 409.6,199.111 443.733,199.111 443.733,68.267\" />\n      </g>\n    </g>\n  </svg>\n);\n\nexport default MinimalizeIcon; ","import GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport GameSurvivalInfo from \"../components/Game/GameSurvivalInfo\";\nimport { GameMode, GameStatus, LEVEL_MAX } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\nimport { useGameActions } from \"../hooks/useGameActions\";\nimport GameReplay from \"../components/Game/GameReplay\";\nimport { useEffect, useState } from \"react\";\nimport GameSurvivalWinInfo from \"../components/Game/GameSurvivalWinInfo\";\nimport GameSurvivalLoseInfo from \"../components/Game/GameSurvivalLoseInfo\";\nimport './css/survival-page.css';\nimport GameStickySurvivalTiming from \"../components/Game/GameStickySurvivalTiming\";\nimport styles from '../pages/MainPage.module.css';\nimport MinimalizeIcon from \"../components/MinimalizeIcon\";\n\nconst SurvivalModePage = () =>\n{\n  const { status } = useRecoilValue(gameState);\n  const { replayGame, endGame } = useGameActions(GameMode.SURVIVAL_MODE);\n  const { level } = useRecoilValue(gameState);\n  const [isWin, setIsWin] = useState(false);\n  const [hideSidebar, setHideSidebar] = useState(false);\n  const currentLevel = Number.parseInt(level) > Number.parseInt(LEVEL_MAX) ? LEVEL_MAX : level\n  useEffect(() =>\n  {\n    if (Number.parseInt(level) >= 13)\n    {\n      endGame(true);\n      setIsWin(true)\n    } else\n    {\n      setIsWin(false)\n    }\n  }, [level])\n  const hasTiming = () =>\n  {\n    if (status === GameStatus.PENDING)\n    {\n      return false\n    }\n    return true\n  }\n  return (\n    <div className=\"game-container\" style={{ position: 'relative' }}>\n      {isWin ? <GameSurvivalWinInfo isWin={isWin} /> : <GameSurvivalLoseInfo hasTiming={hasTiming()} />}\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Survival mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status} ${hideSidebar ? 'full' : ''}`}>\n        <GameOverlay />\n        <GameBoard mode={GameMode.SURVIVAL_MODE} />\n      </div>\n      <div className={`sidebar ${hideSidebar ? 'hide' : ''}`}>\n        <GameSurvivalInfo hasTiming />\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '2px' }}>\n          <p style={{ fontSize: '7px', textAlign: 'center', color: '#D22128' }}>Thời gian sẽ tăng thêm khi chọn\n            khớp một cặp pokemon</p>\n          <span style={{ color: '#D22128' }}>|</span>\n          <p style={{ fontSize: '7px', textAlign: 'center', color: '#D22128' }}>Chọn sai cặp sẽ bị giảm thời gian 10s</p>\n        </div>\n        <GameReplay action={replayGame} />\n        <div style={{ width: 'fit-content', display: 'flex', justifyContent: 'center' }}>\n          <button style={{ display: 'flex', justifyContent: 'center', fontSize: '15px', padding: '7px', marginTop: '0' }} className={styles.button} onClick={() => setHideSidebar(!hideSidebar)}>\n            Tối giản <span style={{ verticalAlign: 'middle', display: 'inline-block', height: '16px', paddingLeft: '4px' }}><MinimalizeIcon fill=\"#A80000\" width={16} height={16} /></span>\n          </button>\n        </div>\n      </div>\n      {hideSidebar && (\n        <div\n          className={`sticky-info sticky-info-card`}\n          style={{\n            position: 'fixed',\n            top: '8px',\n            right: '8px',\n            zIndex: 1000,\n            background: '#fff',\n            borderRadius: '8px',\n            boxShadow: '0 2px 8px rgba(0,0,0,0.10)',\n            padding: '4px 5px 3px 5px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: '3px',\n            transition: 'box-shadow 0.2s, transform 0.2s',\n            border: '1px solid #f2f2f2',\n            width: '105px',\n            minWidth: '105px',\n            maxWidth: '105px',\n            cursor: 'pointer',\n          }}\n          onClick={() => setHideSidebar(!hideSidebar)}\n          onMouseOver={e => {\n            (e.currentTarget as HTMLDivElement).style.boxShadow = '0 4px 12px rgba(210,33,40,0.12)';\n            (e.currentTarget as HTMLDivElement).style.transform = 'translateY(-1px) scale(1.01)';\n          }}\n          onMouseOut={e => {\n            (e.currentTarget as HTMLDivElement).style.boxShadow = '0 2px 8px rgba(0,0,0,0.10)';\n            (e.currentTarget as HTMLDivElement).style.transform = 'none';\n          }}\n        >\n          <span\n            className=\"game-title\"\n            style={{\n              color: '#D22128',\n              boxShadow: 'none',\n              marginTop: '0px',\n              background: '#fff',\n              padding: '1px 3px',\n              fontSize: '10px',\n              borderRadius: '3px',\n              fontWeight: 700,\n              letterSpacing: '0.2px',\n              marginBottom: '0',\n              width: '100%',\n              textAlign: 'center',\n            }}\n          >\n            Lv <span>{currentLevel}/{LEVEL_MAX}</span>\n          </span>\n          <GameStickySurvivalTiming hasTiming={hasTiming()} />\n          <div style={{ width: '100%', display: 'flex', justifyContent: 'center' }}>\n            <button\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: '7px',\n                padding: '2px 0',\n                marginTop: '0',\n                color: '#fff',\n                background: '#D22128',\n                border: 'none',\n                borderRadius: '3px',\n                fontWeight: 700,\n                boxShadow: '0 1px 2px rgba(210,33,40,0.08)',\n                cursor: 'pointer',\n                transition: 'background 0.2s, box-shadow 0.2s',\n                whiteSpace: 'nowrap',\n                width: '100%',\n                textAlign: 'center',\n                minWidth: '0'\n              }}\n              className={styles.button}\n              onClick={e => {\n                e.stopPropagation();\n                setHideSidebar(!hideSidebar);\n              }}\n              onMouseOver={e => {\n                (e.currentTarget as HTMLButtonElement).style.background = '#a80000';\n                (e.currentTarget as HTMLButtonElement).style.boxShadow = '0 1px 4px rgba(210,33,40,0.12)';\n              }}\n              onMouseOut={e => {\n                (e.currentTarget as HTMLButtonElement).style.background = '#D22128';\n                (e.currentTarget as HTMLButtonElement).style.boxShadow = '0 1px 2px rgba(210,33,40,0.08)';\n              }}\n            >\n              Mở rộng <span style={{ verticalAlign: 'middle', display: 'inline-block', height: '7px', paddingLeft: '2px' }}><MinimalizeIcon fill=\"#fff\" width={7} height={7} /></span>\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SurvivalModePage;\n","import { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useSetRecoilState } from \"recoil\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { FormEventHandler } from \"react\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { useHistory } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { nanoid } from \"nanoid\";\nimport styles from './PlayerPage.module.css';\n\nconst PlayerPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const setPlayer = useSetRecoilState(playerState);\n  const [_, saveLocalPlayerName] = useLocalStorage(\"player\", \"\");\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const playerName = event.currentTarget.playerName.value;\n    if (playerName && playerName.trim() !== \"\") {\n      if (playerName.match(/^[a-zA-Z0-9 ]*$/gim)) {\n        const newPlayer = playerName + \"-\" + nanoid(6);\n        saveLocalPlayerName(newPlayer);\n        setPlayer({ player: newPlayer, playerTiming: 0 });\n        history.push(Routes.SURVIVAL_MODE_EASY_PAGE);\n      } else {\n        alert(t(\"Accept alphabet and digit only.\"));\n      }\n    } else {\n      alert(t(\"Please enter your name\"));\n    }\n  };\n\n  return (\n    <div className={styles.background}>\n      <div className={styles.overlay}>\n        <h1>\n          <img src=\"game-title.png\" alt=\"\" />\n        </h1>\n        <form onSubmit={handleSubmit} className={styles.form}>\n          <input\n            name=\"playerName\"\n            type=\"text\"\n            autoFocus\n            color=\"black\"\n            placeholder={t(\"Enter your name here\")}\n            maxLength={20}\n            autoComplete=\"off\"\n            className={styles.input}\n          />\n          <button className={styles.button}>{t(\"Submit\")}</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerPage;\n","import { FC, MouseEventHandler, useCallback, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { GameStatus } from \"../../types/game\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\n\ninterface CompetitorReadyGameButtonProps {\n  status: GameStatus;\n  player: string;\n}\n\nconst CompetitorReadyGameButton: FC<CompetitorReadyGameButtonProps> = ({\n  status,\n  player,\n}) => {\n  const { t } = useTranslation();\n  const { allReady, competitor } = useRecoilValue(gameBattleState);\n  const classReady = allReady.includes(competitor ?? \"\") ? \"ready\" : \"\";\n\n  return (\n    <>\n      <button className={`button-${status} ${classReady}`}>{t(\"Ready\")}</button>\n      <div>\n        {competitor && (\n          <span>\n            <em>(ID: {getPlayerID(competitor)})</em> {getPlayerName(competitor)}{\" \"}\n          </span>\n        )}\n        <strong>:{t(\"Competitor\")}</strong>\n      </div>\n    </>\n  );\n};\n\nexport default CompetitorReadyGameButton;\n","import { atom } from \"recoil\";\nimport { GameBattlePointsState, GameTypeState } from \"../../types/game\";\n\nconst gameBattlePointsState = atom<GameBattlePointsState>({\n  key: GameTypeState.GAME_BATTLE_POINTS_STATE,\n  default: {\n    competitorPoint: 0,\n    yourPoint: 0,\n  },\n});\n\nexport default gameBattlePointsState;\n","import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useCallback } from \"react\";\nimport {\n  BONUS_POINTS,\n  GameLevel,\n  gameOptions,\n  GameSocketEvents,\n  GameSocketMessage,\n  GameStatus,\n  LEVEL_UP_POINTS,\n  PENALTY_POINTS,\n} from \"../types/game\";\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\nimport gameBattleState from \"../recoil/atoms/gameBattleState\";\nimport gameBattlePointsState from \"../recoil/atoms/gameBattlePointsState\";\n\nexport function useGameBattleActions() {\n  const setGame = useSetRecoilState(gameState);\n  const resetGameState = useResetRecoilState(gameState);\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\n  const setGameBattle = useSetRecoilState(gameBattleState);\n  const setGameOverlay = useSetRecoilState(gameOverlayState);\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\n  const setGameBattlePoints = useSetRecoilState(gameBattlePointsState);\n  const resetGameBattlePoints = useResetRecoilState(gameBattlePointsState);\n  const {\n    playBiteSound,\n    playYouWinSound,\n    playDisableSound,\n    playOpenMenuSound,\n    playRisingPopSound,\n    playGlugSound,\n  } = useRecoilValue(gameSoundState);\n\n  const selectBattlePokemon = (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => {\n    playBiteSound && playBiteSound();\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\n  };\n\n  const resetGame = () => {\n    resetGameState();\n    resetGameOverlayState();\n    resetSelectedPokemonsState();\n    setGameBattle((gameBattle) => ({ ...gameBattle, allReady: [] }));\n    reSetupGame();\n  };\n\n  const pendingGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.PENDING,\n    }));\n  };\n\n  const initGame = useCallback(\n    (level: GameLevel, status: GameStatus = GameStatus.PENDING) => {\n      const { row, col } = gameOptions[level];\n      const pokemons = makeListPokemons(row, col);\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n        pokemons,\n        row,\n        col\n      );\n      setGame({\n        pokemons: newPokemons,\n        matrix: pokemonMatrix,\n        level,\n        row,\n        col,\n        status,\n      });\n    },\n    [setGame]\n  );\n\n  const reSetupGame = () => {\n    initGame(GameLevel.LEVEL_1);\n  };\n\n  const endGame = (winner: string) => {\n    playYouWinSound && playYouWinSound();\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.COMPLETED,\n    }));\n    setGameBattle((prevGame) => ({\n      ...prevGame,\n      winner,\n      allReady: [],\n    }));\n  };\n\n  const startGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.RUNNING,\n    }));\n  };\n\n  const onReadyGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.READY,\n    }));\n    setGameBattle((prevGame) => ({\n      ...prevGame,\n      winner: undefined,\n    }));\n    resetGameBattlePoints();\n  };\n\n  const increaseYourPoints = () => {\n    playRisingPopSound && playRisingPopSound();\n    setGameBattlePoints((gameBattlePoints) => ({\n      ...gameBattlePoints,\n      yourPoint: gameBattlePoints.yourPoint + BONUS_POINTS,\n    }));\n  };\n\n  const decreaseYourPoints = () => {\n    playGlugSound && playGlugSound();\n    setGameBattlePoints((gameBattlePoints) => ({\n      ...gameBattlePoints,\n      yourPoint: gameBattlePoints.yourPoint - PENALTY_POINTS,\n    }));\n  };\n\n  const levelUpYourPoints = () => {\n    playGlugSound && playGlugSound();\n    setGameBattlePoints((gameBattlePoints) => ({\n      ...gameBattlePoints,\n      yourPoint: gameBattlePoints.yourPoint + LEVEL_UP_POINTS,\n    }));\n  };\n\n  const handleSocketEvents = ({\n    event,\n    content,\n    player,\n    command,\n    match,\n    currentPlayer,\n  }: GameSocketMessage) => {\n    // console.log(\"handleSocketEvents\", {\n    //   event,\n    //   content,\n    //   player,\n    //   command,\n    //   match,\n    //   currentPlayer,\n    // });\n    switch (event) {\n      case GameSocketEvents.READY:\n        playOpenMenuSound && playOpenMenuSound();\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          allReady: gameBattle.allReady.includes(player)\n            ? gameBattle.allReady\n            : [...gameBattle.allReady, player],\n        }));\n        break;\n      case GameSocketEvents.UNREADY:\n        playDisableSound && playDisableSound();\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          allReady: gameBattle.allReady.filter(\n            (playerReady) => playerReady !== player\n          ),\n        }));\n        break;\n      case GameSocketEvents.JOINED:\n        if (player !== currentPlayer)\n          playRisingPopSound && playRisingPopSound();\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          competitor:\n            player === currentPlayer\n              ? gameBattle.competitor\n              : player === gameBattle.competitor\n              ? gameBattle.competitor\n              : player,\n        }));\n        resetGame();\n        break;\n      case GameSocketEvents.QUIT:\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          competitor: undefined,\n          allReady:\n            player === currentPlayer\n              ? []\n              : gameBattle.allReady.filter(\n                  (playerReady) => playerReady === currentPlayer\n                ),\n        }));\n        break;\n      case GameSocketEvents.INCREASE_COMPETITOR_POINTS:\n        if (player !== currentPlayer) {\n          setGameBattlePoints((gameBattlePoints) => ({\n            ...gameBattlePoints,\n            competitorPoint: gameBattlePoints.competitorPoint + BONUS_POINTS,\n          }));\n        }\n        break;\n      case GameSocketEvents.DECREASE_COMPETITOR_POINTS:\n        if (player !== currentPlayer) {\n          setGameBattlePoints((gameBattlePoints) => ({\n            ...gameBattlePoints,\n            competitorPoint: gameBattlePoints.competitorPoint - BONUS_POINTS,\n          }));\n        }\n        break;\n      case GameSocketEvents.FREEZE_COMPETITOR_BOARD:\n        if (player !== currentPlayer) {\n          setGameOverlay((gameOverlayState) => ({\n            ...gameOverlayState,\n            freezing: true,\n          }));\n        }\n        break;\n      case GameSocketEvents.LEVEL_UP_POINTS:\n        if (player !== currentPlayer) {\n          setGameBattlePoints((gameBattlePoints) => ({\n            ...gameBattlePoints,\n            competitorPoint: gameBattlePoints.competitorPoint + LEVEL_UP_POINTS,\n          }));\n        }\n        break;\n      case GameSocketEvents.GAME_WINNER:\n        break;\n      default:\n        break;\n    }\n  };\n\n  return {\n    initGame,\n    reSetupGame,\n    startGame,\n    onReadyGame,\n    endGame,\n    selectBattlePokemon,\n    resetGame,\n    pendingGame,\n    increaseYourPoints,\n    decreaseYourPoints,\n    levelUpYourPoints,\n    handleSocketEvents,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattlePointsState from \"../../recoil/atoms/gameBattlePointsState\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport { useEffect } from \"react\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport { GameStatus } from \"../../types/game\";\n\nconst GameBattleBar = () => {\n  const { t } = useTranslation();\n  const { endGame } = useGameBattleActions();\n  const { yourPoint, competitorPoint } = useRecoilValue(gameBattlePointsState);\n  const { competitor } = useRecoilValue(gameBattleState);\n  const { status } = useRecoilValue(gameState);\n  const { player } = useRecoilValue(playerState);\n  const yourWidth = 50 + yourPoint - competitorPoint;\n\n  // useEffect(() => {\n  //   if (yourWidth >= 100) {\n  //     endGame(player);\n  //   } else if (yourWidth <= 0) {\n  //     endGame(competitor ?? player);\n  //   }\n  // }, [yourWidth]);\n\n  if (status === GameStatus.RUNNING) {\n    if (yourWidth >= 100) {\n      endGame(player);\n    } else if (yourWidth <= 0) {\n      endGame(competitor ?? player);\n    }\n  }\n\n  return (\n    <div className=\"battle-bar animated-red-gradient\">\n      <div\n        className=\"your-bar animated-blue-gradient\"\n        style={{ width: yourWidth + \"%\" }}\n      >\n        <span className=\"point\">\n          {t(\"Your points\")} {yourPoint ?? 0}\n        </span>\n      </div>\n      <span className=\"point\">\n        {competitorPoint ?? 0} {t(\"Competitor points\")}\n      </span>\n    </div>\n  );\n};\n\nexport default GameBattleBar;\n","import { FC, memo } from \"react\";\nimport { GameStatus, Pokemon } from \"../../types/game\";\n\ntype PokemonCardProps = {\n  pokemon: Pokemon;\n  rowIndex: number;\n  colIndex: number;\n  isSelected: number | boolean;\n  status: GameStatus;\n  selectPokemon: (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => void;\n};\n\nconst PokemonCard: FC<PokemonCardProps> = ({\n  pokemon,\n  rowIndex,\n  colIndex,\n  isSelected,\n  status,\n  selectPokemon,\n}) => {\n  const selected = isSelected ? \"selected\" : \"\";\n  const hidden = pokemon.matched ? \"hidden\" : \"\";\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${pokemon.image ?? \"\"})`,\n      }}\n      className={`pokemon-card ${selected} ${hidden}`}\n      onClick={() => {\n        if (\n          !isSelected &&\n          !pokemon.matched &&\n          status === GameStatus.RUNNING &&\n          pokemon.nid\n        ) {\n          selectPokemon(pokemon.nid, rowIndex, colIndex);\n        }\n      }}\n    />\n  );\n};\n\nfunction propsAreEquals(\n  prevProps: PokemonCardProps,\n  nextProps: PokemonCardProps\n) {\n  return (\n    prevProps.pokemon.nid === nextProps.pokemon.nid &&\n    prevProps.pokemon.image === nextProps.pokemon.image &&\n    prevProps.pokemon.matched === nextProps.pokemon.matched &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.status === nextProps.status\n  );\n}\n\nexport default memo(PokemonCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\nimport { GameStatus, Pokemon } from \"../../types/game\";\nimport PokemonBattleCard from \"./PokemonBattleCard\";\n\ntype PokemonBattleRowProps = {\n  pokemons: Pokemon[];\n  rowIndex: number;\n  status: GameStatus;\n};\n\nconst PokemonBattleRow: FC<PokemonBattleRowProps> = ({\n  pokemons,\n  rowIndex,\n  status,\n}) => {\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\n  const { selectBattlePokemon } = useGameBattleActions();\n  return (\n    <>\n      {pokemons.map((pokemon, index) => (\n        <PokemonBattleCard\n          key={`card-${index}`}\n          pokemon={pokemon}\n          rowIndex={rowIndex}\n          colIndex={index}\n          isSelected={\n            pokemon.nid !== undefined &&\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\n          }\n          selectPokemon={selectBattlePokemon}\n          status={status}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PokemonBattleRow;\n","import { useEffect, useLayoutEffect, useRef } from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameBattleState from \"../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport {\n  GameBattleEffect,\n  GameLevel,\n  GameStatus,\n  LEVEL_BATTLE_MAX,\n  nextLevel,\n  Pokemon,\n} from \"../types/game\";\nimport {\n  generatePokemonMatrix,\n  checkCompletedLevel,\n  hasAnyConnectLine,\n  reShufflePokemonList,\n  randomEffectEvent,\n} from \"../utils/game\";\nimport { useGameBattleActions } from \"./useGameBattleActions\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\n\nexport default function useGameBattleEngine() {\n  const { playLevelUpSound, playCompletedGameSound } =\n    useRecoilValue(gameSoundState);\n  const {\n    initGame,\n    resetGame,\n    endGame,\n    onReadyGame,\n    startGame,\n    pendingGame,\n    increaseYourPoints,\n    decreaseYourPoints,\n    levelUpYourPoints,\n  } = useGameBattleActions();\n  const setGame = useSetRecoilState(gameState);\n  const currentPlayer = useRecoilValue(playerState);\n  const { matrix, row, col, status, pokemons, level } =\n    useRecoilValue(gameState);\n  const {\n    allReady,\n    competitor,\n    sendJoinedGame,\n    sendQuitGame,\n    sendIncreasePoints,\n    sendDecreasePoints,\n    sendGameEffect,\n  } = useRecoilValue(gameBattleState);\n  const { connectingLinePoints } = useRecoilValue(gameOverlayState);\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\n    const newShufflePokemons = reShufflePokemonList(pokemons);\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n      newShufflePokemons,\n      row,\n      col\n    );\n    setGame({\n      pokemons: newPokemons,\n      matrix: pokemonMatrix,\n      level,\n      row,\n      col,\n      status: GameStatus.RUNNING,\n    });\n  };\n\n  const competitorRef = useRef<undefined | string>(undefined);\n\n  // quit room when refresh or close/redirect\n  useLayoutEffect(() => {\n    const sendQuitBeforeOut = () => {\n      sendQuitGame && sendQuitGame();\n    };\n    window.addEventListener(\"beforeunload\", sendQuitBeforeOut);\n    return () => {\n      window.removeEventListener(\"beforeunload\", sendQuitBeforeOut);\n    };\n  }, [sendQuitGame]);\n\n  // check competitor player joined room\n  useEffect(() => {\n    if (competitorRef.current !== competitor && competitor !== undefined) {\n      competitorRef.current = competitor;\n      sendJoinedGame && sendJoinedGame();\n    } else {\n      if (competitor === undefined) {\n        competitorRef.current = competitor;\n      }\n    }\n  }, [competitor]);\n\n  useEffect(() => {\n    if ([GameStatus.PENDING].includes(status) && allReady.length === 2) {\n      onReadyGame();\n    }\n    if ([GameStatus.RUNNING].includes(status) && allReady.length === 1) {\n      endGame(allReady[0]);\n    }\n    if ([GameStatus.COMPLETED].includes(status) && allReady.length === 1) {\n      pendingGame();\n    }\n    if ([GameStatus.READY].includes(status)) {\n      if (allReady.length === 1) {\n        resetGame();\n      }\n    }\n  }, [allReady.length, status]);\n\n  // Setup game\n  useEffect(() => {\n    if (status === GameStatus.PENDING) {\n      // playFanfareSound && playFanfareSound();\n      initGame(level);\n    }\n    return () => {\n      // cleanup\n    };\n  }, [status]);\n\n  // Check completed one level and re-start new one higher level\n  useEffect(() => {\n    if (checkCompletedLevel(pokemons)) {\n      const levelUp: GameLevel = nextLevel[level];\n      if (LEVEL_BATTLE_MAX === levelUp) {\n        const newLevel = GameLevel.LEVEL_1;\n        initGame(newLevel, GameStatus.RUNNING);\n      } else {\n        initGame(levelUp, GameStatus.RUNNING);\n      }\n\n      const effectEvent = randomEffectEvent();\n\n      sendGameEffect && sendGameEffect(effectEvent);\n\n      if (effectEvent === GameBattleEffect.LEVEL_UP) {\n        levelUpYourPoints();\n      }\n\n      playCompletedGameSound && playCompletedGameSound();\n    } else {\n      const { foundConnectLine } = hasAnyConnectLine(\n        pokemons,\n        matrix,\n        row,\n        col\n      );\n      if (Object.keys(pokemons).length && foundConnectLine === false) {\n        shuffleMatrix(pokemons);\n        playLevelUpSound && playLevelUpSound();\n      }\n    }\n  }, [pokemons]);\n\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      decreaseYourPoints();\n      sendDecreasePoints && sendDecreasePoints();\n    }\n    if (connectingLinePoints.length > 1) {\n      increaseYourPoints();\n      sendIncreasePoints && sendIncreasePoints();\n    }\n  }, [connectingLinePoints]);\n\n  return {\n    initGame,\n    resetGame,\n    endGame,\n    onReadyGame,\n    startGame,\n    matrix,\n    row,\n    col,\n    status,\n    level,\n    currentPlayer,\n  };\n}\n","import PokemonBattleRow from \"./Game/PokemonBattleRow\";\nimport useGameBattleEngine from \"../hooks/useGameBattleEngine\";\nimport { GameStatus } from \"../types/game\";\n\nconst GameBattleBoard = () => {\n  const { matrix, row, col, status } = useGameBattleEngine();\n\n  return (\n    <div className={`game-pokemon board-${row}x${col}`}>\n      {status === GameStatus.RUNNING &&\n        matrix &&\n        matrix.map((pokemons, index) => (\n          <PokemonBattleRow\n            key={`row-${index}`}\n            rowIndex={index}\n            pokemons={pokemons}\n            status={status}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameBattleBoard;\n","import { BASE_WS_URL } from \"../../types/chat\";\nimport { FC, memo, useEffect, useState } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useSetRecoilState } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport useGameBattleSocket from \"../../hooks/useGameBattleSocket\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport { GameSocketEvents } from \"../../types/game\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { Routes } from \"../../routes/CONSTANTS\";\n\ninterface GameBattleSocketProps {\n  gameId: string;\n  player: string;\n}\n\nconst GameBattleSocket: FC<GameBattleSocketProps> = ({ gameId, player }) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { handleSocketEvents } = useGameBattleActions();\n  const setGameBattleState = useSetRecoilState(gameBattleState);\n  const [socketUrl] = useState(`${BASE_WS_URL}/game`);\n  const { sendJsonMessage, readyState } = useWebSocket(socketUrl, {\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n    retryOnError: true,\n    shouldReconnect: () => true,\n    queryParams: {\n      player,\n      gameId,\n    },\n    onOpen: (event) => {\n      // console.log(\"onOpen\");\n      const subscribeMessage = {\n        command: 0,\n        match: gameId,\n        player,\n      };\n      sendJsonMessage(subscribeMessage);\n      const joinMessage = {\n        command: 2,\n        match: gameId,\n        player,\n        event: GameSocketEvents.JOINED,\n      };\n      sendJsonMessage(joinMessage);\n    },\n    onMessage: (event) => {\n      const data = JSON.parse(event.data);\n      const messageData = JSON.parse(data.content);\n      messageData.currentPlayer = player;\n\n      handleSocketEvents(messageData);\n    },\n    onError: (event) => {\n      // console.log(\"onError\", event);\n    },\n    onClose: (event) => {\n      // console.log(\"onClose\", event);\n    },\n  });\n\n  const {\n    sendReadyGame,\n    sendUnReadyGame,\n    sendQuitGame,\n    sendSelectedPokemon,\n    sendIncreasePoints,\n    sendDecreasePoints,\n    sendGameEffect,\n    sendJoinedGame,\n  } = useGameBattleSocket({\n    sendJsonMessage,\n    gameId,\n    player,\n  });\n\n  useEffect(() => {\n    setGameBattleState((gameBattleState) => ({\n      ...gameBattleState,\n      sendSelectedPokemon,\n      sendReadyGame,\n      sendUnReadyGame,\n      sendQuitGame,\n      sendJoinedGame,\n      sendDecreasePoints,\n      sendIncreasePoints,\n      sendGameEffect,\n    }));\n  }, [\n    sendSelectedPokemon,\n    sendReadyGame,\n    sendUnReadyGame,\n    sendQuitGame,\n    sendJoinedGame,\n    sendDecreasePoints,\n    sendIncreasePoints,\n    sendGameEffect,\n  ]);\n\n  return readyState !== ReadyState.OPEN ? (\n    <div className={`game-status socket-${ReadyState[readyState]}`}>\n      <div className=\"service-status\">\n        {t(\"Service is not available now.\")}\n        <strong\n          className=\"clickable\"\n          onClick={() => history.push(Routes.MULTI_PLAYER_PAGE)}\n        >\n          {t(\"Out\")}\n        </strong>\n      </div>\n    </div>\n  ) : null;\n};\n\nfunction areEqualGame(\n  prevProps: GameBattleSocketProps,\n  nextProps: GameBattleSocketProps\n) {\n  return (\n    prevProps.player === nextProps.player &&\n    prevProps.gameId === nextProps.gameId\n  );\n}\n\nexport default memo(GameBattleSocket, areEqualGame);\n","import { SendJsonMessage } from \"react-use-websocket/dist/lib/types\";\nimport {\n  GameBattleEffect,\n  GameSocketEvents,\n  GameSocketMessage,\n  SocketCommand,\n} from \"../types/game\";\n\ninterface UseGameBattleSocketProps {\n  sendJsonMessage: SendJsonMessage;\n  gameId: string;\n  player: string;\n}\n\nexport default function useGameBattleSocket({\n  sendJsonMessage,\n  gameId,\n  player,\n}: UseGameBattleSocketProps) {\n  const baseMessageJson: GameSocketMessage = {\n    command: SocketCommand.SEND_MESSAGE,\n    event: GameSocketEvents.READY,\n    match: gameId,\n    player,\n  };\n  const sendReadyGame = () => {\n    const messageJson = {\n      ...baseMessageJson,\n      event: GameSocketEvents.READY,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendUnReadyGame = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.UNREADY,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendQuitGame = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.QUIT,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendSelectedPokemon = (rowIndex: number, colIndex: number) => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.INCREASE_COMPETITOR_POINTS,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendJoinedGame = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.JOINED,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendIncreasePoints = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.INCREASE_COMPETITOR_POINTS,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendDecreasePoints = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.DECREASE_COMPETITOR_POINTS,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendGameEffect = (effect: GameBattleEffect) => {\n    switch (effect) {\n      case GameBattleEffect.FREEZE:\n        const freeJson: GameSocketMessage = {\n          ...baseMessageJson,\n          event: GameSocketEvents.FREEZE_COMPETITOR_BOARD,\n        };\n        sendJsonMessage(freeJson);\n        break;\n\n      default:\n        const levelUpJson: GameSocketMessage = {\n          ...baseMessageJson,\n          event: GameSocketEvents.LEVEL_UP_POINTS,\n        };\n        sendJsonMessage(levelUpJson);\n        break;\n    }\n  };\n\n  return {\n    sendReadyGame,\n    sendUnReadyGame,\n    sendQuitGame,\n    sendSelectedPokemon,\n    sendJoinedGame,\n    sendDecreasePoints,\n    sendIncreasePoints,\n    sendGameEffect,\n  };\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport {\n  BONUS_POINTS,\n  FREEZING_TIME,\n  GameStatus,\n  LEVEL_UP_POINTS,\n  PENALTY_POINTS,\n  PENDING_TIME,\n} from \"../../types/game\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\nimport { useTranslation } from \"react-i18next\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\n\nconst GamePendingTiming = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { allReady, winner } = useRecoilValue(gameBattleState);\n  const { startGame } = useGameBattleActions();\n  const pendingTiming = useRef(PENDING_TIME);\n  const [timingState, setTimingState] = useState(0);\n  const player = winner ? winner : allReady.length > 0 && allReady[0];\n  let winnerPlayerName = \"\";\n  if (player) {\n    winnerPlayerName = `${getPlayerName(player)} - ${getPlayerID(player)}`;\n  }\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | undefined = undefined;\n\n    switch (status) {\n      case GameStatus.READY:\n        intervalId = setInterval(() => {\n          if (pendingTiming.current <= 1) {\n            intervalId && clearInterval(intervalId);\n            pendingTiming.current = PENDING_TIME;\n            startGame();\n          } else {\n            pendingTiming.current--;\n          }\n          const countdownEl = document.getElementById(\n            \"count-down-pending-timing\"\n          );\n          if (countdownEl)\n            countdownEl.innerText = pendingTiming.current.toString();\n        }, 1000);\n        break;\n\n      default:\n        pendingTiming.current = PENDING_TIME;\n        break;\n    }\n\n    return () => {\n      pendingTiming.current = PENDING_TIME;\n      intervalId && clearInterval(intervalId);\n    };\n  }, [status]);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    switch (status) {\n      case GameStatus.READY:\n        timeoutId = setTimeout(() => {\n          setTimingState(timingState + 1);\n        }, 1000);\n        break;\n\n      default:\n        timeoutId && clearTimeout(timeoutId);\n        break;\n    }\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [timingState, status]);\n\n  return (\n    <div className=\"game-info\">\n      {status === GameStatus.COMPLETED && (\n        <div className=\"battle-result\">\n          <h2 className=\"game-title\">{t(\"The winner\")}</h2>\n          <h1 className=\"text-big-title\">{winnerPlayerName}</h1>\n        </div>\n      )}\n      {status === GameStatus.PENDING && (\n        <div className=\"battle-rule\">\n          <h1 className=\"game-title\">{t(\"Battle rule\")}</h1>\n          <blockquote>\n            {t(\"Matched pair of pokemon, your points will be increased\", {\n              point: BONUS_POINTS,\n            })}\n          </blockquote>\n          <blockquote>\n            {t(\n              \"Matched the wrong pair of pokemon, your points will be decreased\",\n              { point: PENALTY_POINTS }\n            )}\n          </blockquote>\n          <blockquote>\n            {t(\n              \"If your points are over competitor points 50 points. You are the winner and vice versa.\"\n            )}\n          </blockquote>\n          <blockquote>\n            {t(\n              \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy` or `Give points to yourself`\",\n              { second: FREEZING_TIME, point: LEVEL_UP_POINTS }\n            )}\n          </blockquote>\n        </div>\n      )}\n      {status === GameStatus.READY && (\n        <div\n          key=\"count-down\"\n          id=\"count-down-pending-timing\"\n          className=\"overlay-pending-timing\"\n        >\n          {pendingTiming.current}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GamePendingTiming;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { GameStatus } from \"../../types/game\";\nimport GameBattleBoard from \"../GameBattleBoard\";\nimport GameOverlay from \"../GameOverlay\";\nimport GameBattleSocket from \"./GameBattleSocket\";\nimport GamePendingTiming from \"./GamePendingTiming\";\n\ninterface GameBoardContainerProps {\n  gameId: string;\n  status: GameStatus;\n  player: string;\n}\n\nconst GameBoardContainer: FC<GameBoardContainerProps> = ({\n  gameId,\n  status,\n  player,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className={`game-board game-${status}`}>\n      <h1 className=\"game-id\">\n        {t(\"Game ID\")}: {gameId}\n      </h1>\n      <GameBattleSocket gameId={gameId} player={player} />\n      <GameOverlay />\n      <GameBattleBoard />\n      <GamePendingTiming />\n    </div>\n  );\n};\n\nexport default GameBoardContainer;\n","import { FC, MouseEventHandler, useCallback, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { GameStatus } from \"../../types/game\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\n\ninterface ReadyGameButtonProps {\n  status: GameStatus;\n  player: string;\n}\n\nconst ReadyGameButton: FC<ReadyGameButtonProps> = ({ status, player }) => {\n  const { t } = useTranslation();\n  const { sendReadyGame, sendUnReadyGame, allReady } =\n    useRecoilValue(gameBattleState);\n  const classReady = allReady.includes(player) ? \"ready\" : \"\";\n\n  const onReady: MouseEventHandler<HTMLButtonElement> = (event) => {\n    if ([GameStatus.PENDING, GameStatus.COMPLETED].includes(status)) {\n      if (classReady === \"ready\") {\n        sendUnReadyGame && sendUnReadyGame();\n      } else {\n        sendReadyGame && sendReadyGame();\n      }\n    } else if ([GameStatus.RUNNING, GameStatus.READY].includes(status)) {\n      sendUnReadyGame && sendUnReadyGame();\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <strong>{t(\"You\")}:</strong>\n        <span>\n          {getPlayerName(player)} <em>(ID: {getPlayerID(player)})</em>\n        </span>\n      </div>\n      <button className={`button-${status} ${classReady}`} onClick={onReady}>\n        {[GameStatus.PENDING, GameStatus.COMPLETED].includes(status) &&\n          t(\"Ready\")}\n        {[GameStatus.RUNNING, GameStatus.READY].includes(status) && t(\"Stop\")}\n      </button>\n    </>\n  );\n};\n\nexport default ReadyGameButton;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport CompetitorReadyGameButton from \"./CompetitorReadyGameButton\";\nimport GameBattleBar from \"./GameBattleBar\";\nimport GameBoardContainer from \"./GameBoardContainer\";\nimport ReadyGameButton from \"./ReadyGameButton\";\n\ninterface GameBattleContainerProps {\n  gameId: string;\n  player: string;\n}\n\nconst GameBattleContainer: FC<GameBattleContainerProps> = ({\n  gameId,\n  player,\n}) => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { sendQuitGame } = useRecoilValue(gameBattleState);\n  return (\n    <>\n      <div className=\"battle-container-bar\">\n        <div id=\"current-player-name\" className=\"player-box\">\n          <ReadyGameButton status={status} player={player} />\n          <Link to={Routes.MULTI_PLAYER_PAGE} onClick={sendQuitGame}>\n            <button className={`button-quit`}>{t(\"Quit\")}</button>\n          </Link>\n        </div>\n        <GameBattleBar />\n        <div id=\"competitor-player-name\" className=\" player-box\">\n          <CompetitorReadyGameButton status={status} player={player} />\n        </div>\n      </div>\n      {gameId && (\n        <GameBoardContainer gameId={gameId} status={status} player={player} />\n      )}\n    </>\n  );\n};\n\nexport default GameBattleContainer;\n","import { Helmet } from \"react-helmet\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport useAsync, { ResponseStatus } from \"../hooks/useAsync\";\nimport { getPlayersInGame } from \"../api/game\";\nimport { useCallback, useEffect } from \"react\";\nimport GameBattleContainer from \"../components/Game/GameBattleContainner\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { useRecoilValue } from \"recoil\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useTranslation } from \"react-i18next\";\n\nconst BattleModePage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { gameId } = useParams<{ gameId: string }>();\n  const { player } = useRecoilValue(playerState);\n  const fetchPlayersInGame = useCallback(\n    () => getPlayersInGame(gameId),\n    [gameId]\n  );\n  const { status: fetchStatus, value: playersInGameResponse } =\n    useAsync(fetchPlayersInGame);\n\n  const playersInGame: string[] = playersInGameResponse?.data ?? [];\n\n  useEffect(() => {\n    if (fetchStatus === ResponseStatus.SUCCESS) {\n      if (playersInGame.length >= 2 && !playersInGame.includes(player)) {\n        alert(t(\"The game was full slot!!!\"));\n        history.push(Routes.MULTI_PLAYER_PAGE);\n      }\n    }\n  }, [fetchStatus]);\n\n  return (\n    <div className=\"game-battle-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Battle mode board</title>\n      </Helmet>\n      {fetchStatus === ResponseStatus.SUCCESS && gameId && (\n        <GameBattleContainer gameId={gameId} player={player} />\n      )}\n    </div>\n  );\n};\n\nexport default BattleModePage;\n","import \"./App.css\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport MainPage from \"./pages/MainPage\";\nimport { Routes } from \"./routes/CONSTANTS\";\nimport SinglePlayerPage from \"./pages/SinglePlayerPage\";\nimport MultiPlayerPage from \"./pages/MultiPlayerPage\";\nimport SpeedModePage from \"./pages/SpeedModePage\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameSoundState from \"./recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"./services/i18n\";\nimport { useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport SurvivalModePage from \"./pages/SurvivalModePage\";\nimport playerState from \"./recoil/atoms/playerState\";\nimport PlayerPage from \"./pages/PlayerPage\";\n\nimport BattleModePage from \"./pages/BattleModePage\";\nimport { getPlayerName } from \"./utils/game\";\n\nfunction App() {\n  const { t } = useTranslation();\n  const { soundReady } = useRecoilValue(gameSoundState);\n  const history = useHistory();\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const [language] = useLocalStorage(\"language\", \"vi\");\n  const [localPlayer, saveLocalPlayerName] = useLocalStorage(\"player\", \"\");\n\n  useEffect(() => {\n    i18n.changeLanguage(language);\n  }, [language]);\n\n  useEffect(() => {\n    if (\n      localPlayer &&\n      localPlayer !== \"\" &&\n      getPlayerName(localPlayer).match(/^[a-zA-Z0-9 ]*$/gim)\n    ) {\n      if (\n        currentPlayer.player.trim() !== \"\" &&\n        getPlayerName(currentPlayer.player).match(/^[a-zA-Z0-9 ]*$/gim)\n      ) {\n        setPlayer({ player: currentPlayer.player, playerTiming: 0 });\n      } else {\n        setPlayer({ player: localPlayer, playerTiming: 0 });\n      }\n    } else {\n      saveLocalPlayerName(\"\");\n      history.push(Routes.PLAYER_PAGE);\n    }\n  }, [localPlayer]);\n  return (\n\n      <div className=\"app\">\n        {soundReady && (\n          <>\n            {/* <ToggleMusic />\n            <ToggleSound /> */}\n          </>\n        )}\n        {!soundReady && <h1>{t(\"Preparing resource...\")}</h1>}\n        {soundReady && (\n          <Switch>\n            <Route path={Routes.MAIN_PAGE} exact>\n              <PlayerPage />\n            </Route>\n            <Route path={Routes.SINGLE_PLAYER_PAGE} exact>\n              <SinglePlayerPage />\n            </Route>\n            <Route path={Routes.MULTI_PLAYER_PAGE} exact>\n              <MultiPlayerPage />\n            </Route>\n            <Route path={Routes.SPEED_MODE_PAGE} exact>\n              <SpeedModePage />\n            </Route>\n            <Route path={Routes.SURVIVAL_MODE_PAGE} exact>\n              <SurvivalModePage />\n            </Route>\n            <Route path={`${Routes.BATTLE_MODE_PAGE}`} exact>\n              <BattleModePage />\n            </Route>\n            <Route path={Routes.PLAYER_PAGE} exact>\n              <PlayerPage />\n            </Route>\n            <Route path=\"*\">\n              <MainPage />\n            </Route>\n          </Switch>\n        )}\n      </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/menu-open.019cf647.mp3\";","export default __webpack_public_path__ + \"static/media/disable-sound.477d0574.mp3\";","export default __webpack_public_path__ + \"static/media/enable-sound.00d0be95.mp3\";","export default __webpack_public_path__ + \"static/media/switch-on.88d10ee7.mp3\";","export default __webpack_public_path__ + \"static/media/switch-off.e5ebe933.mp3\";","export default __webpack_public_path__ + \"static/media/bite.aea7caff.mp3\";","export default __webpack_public_path__ + \"static/media/fanfare.8807360a.mp3\";","export default __webpack_public_path__ + \"static/media/glug-a.b9f1fa99.mp3\";","export default __webpack_public_path__ + \"static/media/rising-pops.7eda816b.mp3\";","export default __webpack_public_path__ + \"static/media/game-completion.a7022fca.wav\";","export default __webpack_public_path__ + \"static/media/gamers-fail-game.1bab0c1d.mp3\";","export default __webpack_public_path__ + \"static/media/time-limited.3894918f.wav\";","export default __webpack_public_path__ + \"static/media/levelup.3dc0430f.mp3\";","export default __webpack_public_path__ + \"static/media/pop-down.cc0a5518.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-on.b776a1ef.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-off.83c6ba5b.mp3\";","export default __webpack_public_path__ + \"static/media/you-win.70d95733.mp3\";","export default __webpack_public_path__ + \"static/media/game-song.c7ee5596.mp3\";","import { atom } from \"recoil\";\n\nconst toggleSoundState = atom<{ music: number; effect: number }>({\n  key: \"TOGGLE_SOUND\",\n  default: {\n    music: 0,\n    effect: 1,\n  },\n});\n\nexport default toggleSoundState;\n","import useSound from \"use-sound\";\nimport { SpriteMap } from \"use-sound/dist/types\";\n\nimport menuOpenSound from \"../assets/sound/menu-open.mp3\";\nimport disableSound from \"../assets/sound/disable-sound.mp3\";\nimport enableSound from \"../assets/sound/enable-sound.mp3\";\nimport onSound from \"../assets/sound/switch-on.mp3\";\nimport offSound from \"../assets/sound/switch-off.mp3\";\nimport biteSound from \"../assets/sound/bite.mp3\";\nimport fanfareSound from \"../assets/sound/fanfare.mp3\";\nimport glugSound from \"../assets/sound/glug-a.mp3\";\nimport risingPopSound from \"../assets/sound/rising-pops.mp3\";\nimport completeGameSound from \"../assets/sound/game-completion.wav\";\nimport failedGameSound from \"../assets/sound/gamers-fail-game.mp3\";\nimport nearlyEndTimeSound from \"../assets/sound/time-limited.wav\";\nimport levelUpSound from \"../assets/sound/levelup.mp3\";\nimport popDownSound from \"../assets/sound/pop-down.mp3\";\nimport popUpOnSound from \"../assets/sound/pop-up-on.mp3\";\nimport popUpOffSound from \"../assets/sound/pop-up-off.mp3\";\nimport youWinSound from \"../assets/sound/you-win.mp3\";\nimport gameSongSound from \"../assets/sound/game-song.mp3\";\nimport { useRecoilValue } from \"recoil\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nexport enum Sound {\n  MENU_OPEN = \"MENU_OPEN\",\n  BITE = \"BITE\",\n  DISABLE = \"DISABLE\",\n  ENABLE = \"ENABLE\",\n  ON = \"ON\",\n  OFF = \"OFF\",\n  FANFARE = \"FANFARE\",\n  GLUG = \"GLUG\",\n  RISING_POP = \"RISING_POP\",\n  COMPLETE_GAME = \"COMPLETE_GAME\",\n  FAIL_GAME = \"FAIL_GAME\",\n  NEARLY_END_TIME = \"NEARLY_END_TIME\",\n  LEVEL_UP = \"LEVEL_UP\",\n  POP_DOWN = \"POP_DOWN\",\n  POP_UP_ON = \"POP_UP_ON\",\n  POP_UP_OFF = \"POP_UP_OFF\",\n  YOU_WIN = \"YOU_WIN\",\n  GAME_SONG = \"GAME_SONG\",\n}\n\ninterface SoundOptions {\n  id?: string;\n  volume?: number;\n  playbackRate?: number;\n  interrupt?: boolean;\n  soundEnabled?: boolean;\n  sprite?: SpriteMap;\n  onload?: () => void;\n}\n\nexport default function usePlaySound(sound?: Sound) {\n  const { music, effect } = useRecoilValue(toggleSoundState);\n  const defaultConfigSound: SoundOptions = {\n    interrupt: true,\n    volume: effect,\n  };\n  let soundPath = menuOpenSound;\n  if (sound) {\n    switch (sound) {\n      case Sound.BITE:\n        soundPath = biteSound;\n        break;\n      case Sound.COMPLETE_GAME:\n        soundPath = completeGameSound;\n        break;\n      case Sound.DISABLE:\n        soundPath = disableSound;\n        break;\n      case Sound.ENABLE:\n        soundPath = enableSound;\n        break;\n      case Sound.ON:\n        soundPath = onSound;\n        break;\n      case Sound.OFF:\n        soundPath = offSound;\n        break;\n      case Sound.FAIL_GAME:\n        soundPath = failedGameSound;\n        break;\n      case Sound.GLUG:\n        soundPath = glugSound;\n        break;\n      case Sound.FANFARE:\n        soundPath = fanfareSound;\n        break;\n      case Sound.RISING_POP:\n        soundPath = risingPopSound;\n        break;\n      case Sound.NEARLY_END_TIME:\n        soundPath = nearlyEndTimeSound;\n        break;\n      case Sound.LEVEL_UP:\n        soundPath = levelUpSound;\n        break;\n      case Sound.POP_DOWN:\n        soundPath = popDownSound;\n        break;\n      case Sound.POP_UP_ON:\n        soundPath = popUpOnSound;\n        break;\n      case Sound.POP_UP_OFF:\n        soundPath = popUpOffSound;\n        break;\n      case Sound.YOU_WIN:\n        soundPath = youWinSound;\n        break;\n      case Sound.GAME_SONG:\n        soundPath = gameSongSound;\n        // defaultConfigSound.volume = music;\n        break;\n      default:\n        soundPath = menuOpenSound;\n        break;\n    }\n  }\n\n  const [\n    play,\n    { sound: loadedSound, stop: stopSound, pause: pauseSound, duration },\n  ] = useSound(soundPath, defaultConfigSound);\n\n  return {\n    playSound: play,\n    loadedSound,\n    stopSound,\n    pauseSound,\n    duration,\n    music,\n    effect,\n  };\n}\n","import { memo, useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst BiteSound = () => {\n  const { playSound: playBiteSound, loadedSound } = usePlaySound(Sound.BITE);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playBiteSound }));\n    }\n  }, [loadedSound, playBiteSound, setSounds]);\n  return null;\n};\n\nfunction areLoaded() {\n  return true;\n}\n\nexport default memo(BiteSound, areLoaded);\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst CompletedGameSound = () => {\n  const { playSound: playCompletedGameSound, loadedSound } = usePlaySound(\n    Sound.COMPLETE_GAME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playCompletedGameSound }));\n    }\n  }, [loadedSound, setSounds, playCompletedGameSound]);\n  return null;\n};\n\nexport default CompletedGameSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OpenMenuSound = () => {\n  const { playSound: playOpenMenuSound, loadedSound } = usePlaySound(\n    Sound.MENU_OPEN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOpenMenuSound }));\n    }\n  }, [loadedSound, setSounds, playOpenMenuSound]);\n  return null;\n};\n\nexport default OpenMenuSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst DisableSound = () => {\n  const { playSound: playDisableSound, loadedSound } = usePlaySound(\n    Sound.DISABLE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playDisableSound }));\n    }\n  }, [loadedSound, playDisableSound, setSounds]);\n  return null;\n};\n\nexport default DisableSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst EnableSound = () => {\n  const { playSound: playEnableSound, loadedSound } = usePlaySound(\n    Sound.ENABLE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playEnableSound }));\n    }\n  }, [loadedSound, playEnableSound, setSounds]);\n  return null;\n};\n\nexport default EnableSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst FanfareSound = () => {\n  const { playSound: playFanfareSound, loadedSound } = usePlaySound(\n    Sound.FANFARE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playFanfareSound }));\n    }\n  }, [loadedSound, setSounds, playFanfareSound]);\n  return null;\n};\n\nexport default FanfareSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst FailedGameSound = () => {\n  const { playSound: playFailedGameSound, loadedSound } = usePlaySound(\n    Sound.FAIL_GAME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playFailedGameSound }));\n    }\n  }, [loadedSound, setSounds, playFailedGameSound]);\n  return null;\n};\n\nexport default FailedGameSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst GameSongSound = () => {\n  const {\n    playSound: playGameSong,\n    loadedSound,\n    duration,\n  } = usePlaySound(Sound.GAME_SONG);\n  const setSounds = useSetRecoilState(gameSoundState);\n\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({\n        ...sounds,\n        soundReady: true,\n        gameSongDuration: duration ?? 0,\n        playGameSong,\n      }));\n    }\n  }, [loadedSound]);\n\n  return null;\n};\n\nexport default GameSongSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst LevelUpSound = () => {\n  const { playSound: playLevelUpSound, loadedSound } = usePlaySound(\n    Sound.LEVEL_UP\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playLevelUpSound }));\n    }\n  }, [loadedSound, setSounds, playLevelUpSound]);\n  return null;\n};\n\nexport default LevelUpSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst NearlyEndTimeSound = () => {\n  const { playSound: playNearlyEndTimeSound, loadedSound } = usePlaySound(\n    Sound.NEARLY_END_TIME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playNearlyEndTimeSound }));\n    }\n  }, [loadedSound, setSounds, playNearlyEndTimeSound]);\n  return null;\n};\n\nexport default NearlyEndTimeSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OffSound = () => {\n  const { playSound: playOffSound, loadedSound } = usePlaySound(Sound.OFF);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOffSound }));\n    }\n  }, [loadedSound, playOffSound, setSounds]);\n  return null;\n};\n\nexport default OffSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OnSound = () => {\n  const { playSound: playOnSound, loadedSound } = usePlaySound(Sound.ON);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOnSound }));\n    }\n  }, [loadedSound, playOnSound, setSounds]);\n  return null;\n};\n\nexport default OnSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopDownSound = () => {\n  const { playSound: playPopDownSound, loadedSound } = usePlaySound(\n    Sound.POP_DOWN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopDownSound }));\n    }\n  }, [loadedSound, setSounds, playPopDownSound]);\n  return null;\n};\n\nexport default PopDownSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopUpOffSound = () => {\n  const { playSound: playPopUpOffSound, loadedSound } = usePlaySound(\n    Sound.POP_UP_OFF\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopUpOffSound }));\n    }\n  }, [loadedSound, setSounds, playPopUpOffSound]);\n  return null;\n};\n\nexport default PopUpOffSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopUpOnSound = () => {\n  const { playSound: playPopUpOnSound, loadedSound } = usePlaySound(\n    Sound.POP_UP_ON\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopUpOnSound }));\n    }\n  }, [loadedSound, setSounds, playPopUpOnSound]);\n  return null;\n};\n\nexport default PopUpOnSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst YouWinSound = () => {\n  const { playSound: playYouWinSound, loadedSound } = usePlaySound(\n    Sound.YOU_WIN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playYouWinSound }));\n    }\n  }, [loadedSound, playYouWinSound, setSounds]);\n  return null;\n};\n\nexport default YouWinSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst RisingPopSound = () => {\n  const { playSound: playRisingPopSound, loadedSound } = usePlaySound(\n    Sound.RISING_POP\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playRisingPopSound }));\n    }\n  }, [loadedSound, playRisingPopSound, setSounds]);\n  return null;\n};\n\nexport default RisingPopSound;\n","import ReactPlayer from \"react-player/youtube\";\nimport { useRecoilValue } from \"recoil\";\nimport toggleSoundState from \"../../recoil/atoms/toggleSoundState\";\n\nconst YoutubeThemeSong = () => {\n  const { music } = useRecoilValue(toggleSoundState);\n  return (\n    <div className=\"game-theme\">\n      <ReactPlayer\n        url=\"https://www.youtube.com/watch?v=6ZUDiC6TB-k\"\n        playing={music ? true : false}\n        loop\n      />\n    </div>\n  );\n};\n\nexport default YoutubeThemeSong;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst GlugSound = () => {\n  const { playSound: playGlugSound, loadedSound } = usePlaySound(Sound.GLUG);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playGlugSound }));\n    }\n  }, [loadedSound, setSounds, playGlugSound]);\n  return null;\n};\n\nexport default GlugSound;\n","import { FC } from \"react\";\nimport BiteSound from \"./Sound/BiteSound\";\nimport CompletedGameSound from \"./Sound/CompletedGameSound\";\nimport OpenMenuSound from \"./Sound/OpenMenuSound\";\nimport DisableSound from \"./Sound/DisableSound\";\nimport EnableSound from \"./Sound/EnableSound\";\nimport FanfareSound from \"./Sound/FanfareSound\";\nimport FailedGameSound from \"./Sound/FailedGameSound\";\nimport GameSongSound from \"./Sound/GameSongSound\";\nimport LevelUpSound from \"./Sound/LevelUpSound\";\nimport NearlyEndTimeSound from \"./Sound/NearlyEndTimeSound\";\nimport OffSound from \"./Sound/OffSound\";\nimport OnSound from \"./Sound/OnSound\";\nimport PopDownSound from \"./Sound/PopDownSound\";\nimport PopUpOffSound from \"./Sound/PopUpOffSound\";\nimport PopUpOnSound from \"./Sound/PopUpOnSound\";\nimport YouWinSound from \"./Sound/YouWinSound\";\nimport RisingPopSound from \"./Sound/RisingPopSound\";\nimport YoutubeThemeSong from \"./Sound/YoutubeThemeSong\";\nimport GlugSound from \"./Sound/GlugSound\";\n\nconst SoundProvider: FC = ({ children }) => {\n  return (\n    <>\n      <YoutubeThemeSong />\n      <BiteSound />\n      <CompletedGameSound />\n      <DisableSound />\n      <EnableSound />\n      <FailedGameSound />\n      <FanfareSound />\n      <GameSongSound />\n      <LevelUpSound />\n      <NearlyEndTimeSound />\n      <OffSound />\n      <OnSound />\n      <OpenMenuSound />\n      <PopDownSound />\n      <PopUpOffSound />\n      <PopUpOnSound />\n      <RisingPopSound />\n      <YouWinSound />\n      <GlugSound />\n      {children}\n    </>\n  );\n};\n\nexport default SoundProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport SoundProvider from \"./components/SoundProvider\";\n\n// --- Viewport Height Fix for Mobile Safari ---\nfunction setRealVh() {\n  const vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--real-vh', `${vh}px`);\n}\nwindow.addEventListener('resize', setRealVh);\nwindow.addEventListener('orientationchange', setRealVh);\nsetRealVh();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <SoundProvider>\n        <Router>\n          <App />\n        </Router>\n      </SoundProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}